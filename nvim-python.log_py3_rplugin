2017-10-26 16:09:16,894 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 1, b'vim_get_api_info', ()]
2017-10-26 16:09:16,895 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\x01\xb0vim_get_api_info\x90''
2017-10-26 16:09:16,895 [DEBUG @ base.py:run:138] 76820 - Entering event loop
2017-10-26 16:09:16,895 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:16,896 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [0, 1, b'poll', []]
2017-10-26 16:09:16,896 [DEBUG @ async_session.py:_on_request:86] 76820 - received request: b'poll', []
2017-10-26 16:09:16,896 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:16,896 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:16,897 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:16,898 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:16,898 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:16,898 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:16,898 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:16,899 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [1, 1, None, [2, {b'version': {b'major': 0, b'api_prerelease': True, b'api_level': 3, b'patch': 1, b'api_compatible': 0, b'minor': 2}, b'ui_events': [{b'name': b'resize', b'since': 3, b'parameters': [[b'Integer', b'rows'], [b'Integer', b'columns']]}, {b'name': b'clear', b'since': 3, b'parameters': []}, {b'name': b'eol_clear', b'since': 3, b'parameters': []}, {b'name': b'cursor_goto', b'since': 3, b'parameters': [[b'Integer', b'row'], [b'Integer', b'col']]}, {b'name': b'mode_info_set', b'since': 3, b'parameters': [[b'Boolean', b'enabled'], [b'Array', b'cursor_styles']]}, {b'name': b'update_menu', b'since': 3, b'parameters': []}, {b'name': b'busy_start', b'since': 3, b'parameters': []}, {b'name': b'busy_stop', b'since': 3, b'parameters': []}, {b'name': b'mouse_on', b'since': 3, b'parameters': []}, {b'name': b'mouse_off', b'since': 3, b'parameters': []}, {b'name': b'mode_change', b'since': 3, b'parameters': [[b'String', b'mode'], [b'Integer', b'mode_idx']]}, {b'name': b'set_scroll_region', b'since': 3, b'parameters': [[b'Integer', b'top'], [b'Integer', b'bot'], [b'Integer', b'left'], [b'Integer', b'right']]}, {b'name': b'scroll', b'since': 3, b'parameters': [[b'Integer', b'count']]}, {b'name': b'highlight_set', b'since': 3, b'parameters': [[b'Dictionary', b'attrs']]}, {b'name': b'put', b'since': 3, b'parameters': [[b'String', b'str']]}, {b'name': b'bell', b'since': 3, b'parameters': []}, {b'name': b'visual_bell', b'since': 3, b'parameters': []}, {b'name': b'flush', b'since': 3, b'parameters': []}, {b'name': b'update_fg', b'since': 3, b'parameters': [[b'Integer', b'fg']]}, {b'name': b'update_bg', b'since': 3, b'parameters': [[b'Integer', b'bg']]}, {b'name': b'update_sp', b'since': 3, b'parameters': [[b'Integer', b'sp']]}, {b'name': b'suspend', b'since': 3, b'parameters': []}, {b'name': b'set_title', b'since': 3, b'parameters': [[b'String', b'title']]}, {b'name': b'set_icon', b'since': 3, b'parameters': [[b'String', b'icon']]}, {b'name': b'popupmenu_show', b'since': 3, b'parameters': [[b'Array', b'items'], [b'Integer', b'selected'], [b'Integer', b'row'], [b'Integer', b'col']]}, {b'name': b'popupmenu_hide', b'since': 3, b'parameters': []}, {b'name': b'popupmenu_select', b'since': 3, b'parameters': [[b'Integer', b'selected']]}, {b'name': b'tabline_update', b'since': 3, b'parameters': [[b'Tabpage', b'current'], [b'Array', b'tabs']]}], b'error_types': {b'Exception': {b'id': 0}, b'Validation': {b'id': 1}}, b'types': {b'Window': {b'id': 1, b'prefix': b'nvim_win_'}, b'Buffer': {b'id': 0, b'prefix': b'nvim_buf_'}, b'Tabpage': {b'id': 2, b'prefix': b'nvim_tabpage_'}}, b'functions': [{b'return_type': b'Integer', b'name': b'nvim_buf_line_count', b'since': 1, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'String', b'deprecated_since': 1, b'name': b'buffer_get_line', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'index']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_set_line', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'index'], [b'String', b'line']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_del_line', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'index']], b'method': False}, {b'return_type': b'ArrayOf(String)', b'deprecated_since': 1, b'name': b'buffer_get_line_slice', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'include_start'], [b'Boolean', b'include_end']], b'method': False}, {b'return_type': b'ArrayOf(String)', b'name': b'nvim_buf_get_lines', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_set_line_slice', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'include_start'], [b'Boolean', b'include_end'], [b'ArrayOf(String)', b'replacement']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_buf_set_lines', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing'], [b'ArrayOf(String)', b'replacement']], b'method': True}, {b'return_type': b'Object', b'name': b'nvim_buf_get_var', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'Integer', b'name': b'nvim_buf_get_changedtick', b'since': 2, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'ArrayOf(Dictionary)', b'name': b'nvim_buf_get_keymap', b'since': 3, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'mode']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_buf_set_var', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_buf_del_var', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'buffer_set_var', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'buffer_del_var', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_buf_get_option', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_buf_set_option', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': True}, {b'return_type': b'Integer', b'deprecated_since': 2, b'name': b'nvim_buf_get_number', b'since': 1, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'String', b'name': b'nvim_buf_get_name', b'since': 1, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_buf_set_name', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'Boolean', b'name': b'nvim_buf_is_valid', b'since': 1, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_insert', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'lnum'], [b'ArrayOf(String)', b'lines']], b'method': False}, {b'return_type': b'ArrayOf(Integer, 2)', b'name': b'nvim_buf_get_mark', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'Integer', b'name': b'nvim_buf_add_highlight', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'String', b'hl_group'], [b'Integer', b'line'], [b'Integer', b'col_start'], [b'Integer', b'col_end']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_buf_clear_highlight', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'Integer', b'line_start'], [b'Integer', b'line_end']], b'method': True}, {b'return_type': b'ArrayOf(Window)', b'name': b'nvim_tabpage_list_wins', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage']], b'method': True}, {b'return_type': b'Object', b'name': b'nvim_tabpage_get_var', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_tabpage_set_var', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name'], [b'Object', b'value']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_tabpage_del_var', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'tabpage_set_var', b'since': 0, b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'tabpage_del_var', b'since': 0, b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': False}, {b'return_type': b'Window', b'name': b'nvim_tabpage_get_win', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage']], b'method': True}, {b'return_type': b'Integer', b'name': b'nvim_tabpage_get_number', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage']], b'method': True}, {b'return_type': b'Boolean', b'name': b'nvim_tabpage_is_valid', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_ui_attach', b'since': 1, b'parameters': [[b'Integer', b'width'], [b'Integer', b'height'], [b'Dictionary', b'options']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'ui_attach', b'since': 0, b'parameters': [[b'Integer', b'width'], [b'Integer', b'height'], [b'Boolean', b'enable_rgb']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_ui_detach', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'void', b'name': b'nvim_ui_try_resize', b'since': 1, b'parameters': [[b'Integer', b'width'], [b'Integer', b'height']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_ui_set_option', b'since': 1, b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_command', b'since': 1, b'parameters': [[b'String', b'command']], b'method': False}, {b'return_type': b'Dictionary', b'name': b'nvim_get_hl_by_name', b'since': 3, b'parameters': [[b'String', b'name'], [b'Boolean', b'rgb']], b'method': False}, {b'return_type': b'Dictionary', b'name': b'nvim_get_hl_by_id', b'since': 3, b'parameters': [[b'Integer', b'hl_id'], [b'Boolean', b'rgb']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_feedkeys', b'since': 1, b'parameters': [[b'String', b'keys'], [b'String', b'mode'], [b'Boolean', b'escape_csi']], b'method': False}, {b'return_type': b'Integer', b'name': b'nvim_input', b'since': 1, b'parameters': [[b'String', b'keys']], b'method': False}, {b'return_type': b'String', b'name': b'nvim_replace_termcodes', b'since': 1, b'parameters': [[b'String', b'str'], [b'Boolean', b'from_part'], [b'Boolean', b'do_lt'], [b'Boolean', b'special']], b'method': False}, {b'return_type': b'String', b'name': b'nvim_command_output', b'since': 1, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_eval', b'since': 1, b'parameters': [[b'String', b'expr']], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_call_function', b'since': 1, b'parameters': [[b'String', b'fname'], [b'Array', b'args']], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_execute_lua', b'since': 3, b'parameters': [[b'String', b'code'], [b'Array', b'args']], b'method': False}, {b'return_type': b'Integer', b'name': b'nvim_strwidth', b'since': 1, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'ArrayOf(String)', b'name': b'nvim_list_runtime_paths', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'void', b'name': b'nvim_set_current_dir', b'since': 1, b'parameters': [[b'String', b'dir']], b'method': False}, {b'return_type': b'String', b'name': b'nvim_get_current_line', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'void', b'name': b'nvim_set_current_line', b'since': 1, b'parameters': [[b'String', b'line']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_del_current_line', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_get_var', b'since': 1, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_set_var', b'since': 1, b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_del_var', b'since': 1, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'vim_set_var', b'since': 0, b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'vim_del_var', b'since': 0, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_get_vvar', b'since': 1, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_get_option', b'since': 1, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_set_option', b'since': 1, b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_out_write', b'since': 1, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_err_write', b'since': 1, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_err_writeln', b'since': 1, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'ArrayOf(Buffer)', b'name': b'nvim_list_bufs', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'Buffer', b'name': b'nvim_get_current_buf', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'void', b'name': b'nvim_set_current_buf', b'since': 1, b'parameters': [[b'Buffer', b'buffer']], b'method': False}, {b'return_type': b'ArrayOf(Window)', b'name': b'nvim_list_wins', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'Window', b'name': b'nvim_get_current_win', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'void', b'name': b'nvim_set_current_win', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': False}, {b'return_type': b'ArrayOf(Tabpage)', b'name': b'nvim_list_tabpages', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'Tabpage', b'name': b'nvim_get_current_tabpage', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'void', b'name': b'nvim_set_current_tabpage', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_subscribe', b'since': 1, b'parameters': [[b'String', b'event']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_unsubscribe', b'since': 1, b'parameters': [[b'String', b'event']], b'method': False}, {b'return_type': b'Integer', b'name': b'nvim_get_color_by_name', b'since': 1, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'Dictionary', b'name': b'nvim_get_color_map', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'Dictionary', b'name': b'nvim_get_mode', b'since': 2, b'parameters': [], b'method': False}, {b'return_type': b'ArrayOf(Dictionary)', b'name': b'nvim_get_keymap', b'since': 3, b'parameters': [[b'String', b'mode']], b'method': False}, {b'return_type': b'Array', b'name': b'nvim_get_api_info', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'Array', b'name': b'nvim_call_atomic', b'since': 1, b'parameters': [[b'Array', b'calls']], b'method': False}, {b'return_type': b'Buffer', b'name': b'nvim_win_get_buf', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'ArrayOf(Integer, 2)', b'name': b'nvim_win_get_cursor', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_win_set_cursor', b'since': 1, b'parameters': [[b'Window', b'window'], [b'ArrayOf(Integer, 2)', b'pos']], b'method': True}, {b'return_type': b'Integer', b'name': b'nvim_win_get_height', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_win_set_height', b'since': 1, b'parameters': [[b'Window', b'window'], [b'Integer', b'height']], b'method': True}, {b'return_type': b'Integer', b'name': b'nvim_win_get_width', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_win_set_width', b'since': 1, b'parameters': [[b'Window', b'window'], [b'Integer', b'width']], b'method': True}, {b'return_type': b'Object', b'name': b'nvim_win_get_var', b'since': 1, b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_win_set_var', b'since': 1, b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_win_del_var', b'since': 1, b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'window_set_var', b'since': 0, b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'window_del_var', b'since': 0, b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_win_get_option', b'since': 1, b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_win_set_option', b'since': 1, b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': True}, {b'return_type': b'ArrayOf(Integer, 2)', b'name': b'nvim_win_get_position', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'Tabpage', b'name': b'nvim_win_get_tabpage', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'Integer', b'name': b'nvim_win_get_number', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'Boolean', b'name': b'nvim_win_is_valid', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'buffer_line_count', b'since': 0, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'ArrayOf(String)', b'deprecated_since': 1, b'name': b'buffer_get_lines', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_set_lines', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing'], [b'ArrayOf(String)', b'replacement']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'buffer_get_var', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'buffer_get_option', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_set_option', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': True}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'buffer_get_number', b'since': 0, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'String', b'deprecated_since': 1, b'name': b'buffer_get_name', b'since': 0, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_set_name', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'Boolean', b'deprecated_since': 1, b'name': b'buffer_is_valid', b'since': 0, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'ArrayOf(Integer, 2)', b'deprecated_since': 1, b'name': b'buffer_get_mark', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'buffer_add_highlight', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'String', b'hl_group'], [b'Integer', b'line'], [b'Integer', b'col_start'], [b'Integer', b'col_end']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_clear_highlight', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'Integer', b'line_start'], [b'Integer', b'line_end']], b'method': True}, {b'return_type': b'ArrayOf(Window)', b'deprecated_since': 1, b'name': b'tabpage_get_windows', b'since': 0, b'parameters': [[b'Tabpage', b'tabpage']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'tabpage_get_var', b'since': 0, b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': True}, {b'return_type': b'Window', b'deprecated_since': 1, b'name': b'tabpage_get_window', b'since': 0, b'parameters': [[b'Tabpage', b'tabpage']], b'method': True}, {b'return_type': b'Boolean', b'deprecated_since': 1, b'name': b'tabpage_is_valid', b'since': 0, b'parameters': [[b'Tabpage', b'tabpage']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'ui_detach', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'ui_try_resize', b'since': 0, b'parameters': [[b'Integer', b'width'], [b'Integer', b'height']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_command', b'since': 0, b'parameters': [[b'String', b'command']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_feedkeys', b'since': 0, b'parameters': [[b'String', b'keys'], [b'String', b'mode'], [b'Boolean', b'escape_csi']], b'method': False}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'vim_input', b'since': 0, b'parameters': [[b'String', b'keys']], b'method': False}, {b'return_type': b'String', b'deprecated_since': 1, b'name': b'vim_replace_termcodes', b'since': 0, b'parameters': [[b'String', b'str'], [b'Boolean', b'from_part'], [b'Boolean', b'do_lt'], [b'Boolean', b'special']], b'method': False}, {b'return_type': b'String', b'deprecated_since': 1, b'name': b'vim_command_output', b'since': 0, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'vim_eval', b'since': 0, b'parameters': [[b'String', b'expr']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'vim_call_function', b'since': 0, b'parameters': [[b'String', b'fname'], [b'Array', b'args']], b'method': False}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'vim_strwidth', b'since': 0, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'ArrayOf(String)', b'deprecated_since': 1, b'name': b'vim_list_runtime_paths', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_change_directory', b'since': 0, b'parameters': [[b'String', b'dir']], b'method': False}, {b'return_type': b'String', b'deprecated_since': 1, b'name': b'vim_get_current_line', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_set_current_line', b'since': 0, b'parameters': [[b'String', b'line']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_del_current_line', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'vim_get_var', b'since': 0, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'vim_get_vvar', b'since': 0, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'vim_get_option', b'since': 0, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_set_option', b'since': 0, b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_out_write', b'since': 0, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_err_write', b'since': 0, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_report_error', b'since': 0, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'ArrayOf(Buffer)', b'deprecated_since': 1, b'name': b'vim_get_buffers', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'Buffer', b'deprecated_since': 1, b'name': b'vim_get_current_buffer', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_set_current_buffer', b'since': 0, b'parameters': [[b'Buffer', b'buffer']], b'method': False}, {b'return_type': b'ArrayOf(Window)', b'deprecated_since': 1, b'name': b'vim_get_windows', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'Window', b'deprecated_since': 1, b'name': b'vim_get_current_window', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_set_current_window', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': False}, {b'return_type': b'ArrayOf(Tabpage)', b'deprecated_since': 1, b'name': b'vim_get_tabpages', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'Tabpage', b'deprecated_since': 1, b'name': b'vim_get_current_tabpage', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_set_current_tabpage', b'since': 0, b'parameters': [[b'Tabpage', b'tabpage']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_subscribe', b'since': 0, b'parameters': [[b'String', b'event']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_unsubscribe', b'since': 0, b'parameters': [[b'String', b'event']], b'method': False}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'vim_name_to_color', b'since': 0, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'Dictionary', b'deprecated_since': 1, b'name': b'vim_get_color_map', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'Array', b'deprecated_since': 1, b'name': b'vim_get_api_info', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'Buffer', b'deprecated_since': 1, b'name': b'window_get_buffer', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'ArrayOf(Integer, 2)', b'deprecated_since': 1, b'name': b'window_get_cursor', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'window_set_cursor', b'since': 0, b'parameters': [[b'Window', b'window'], [b'ArrayOf(Integer, 2)', b'pos']], b'method': True}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'window_get_height', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'window_set_height', b'since': 0, b'parameters': [[b'Window', b'window'], [b'Integer', b'height']], b'method': True}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'window_get_width', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'window_set_width', b'since': 0, b'parameters': [[b'Window', b'window'], [b'Integer', b'width']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'window_get_var', b'since': 0, b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'window_get_option', b'since': 0, b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'window_set_option', b'since': 0, b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': True}, {b'return_type': b'ArrayOf(Integer, 2)', b'deprecated_since': 1, b'name': b'window_get_position', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'Tabpage', b'deprecated_since': 1, b'name': b'window_get_tabpage', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'Boolean', b'deprecated_since': 1, b'name': b'window_is_valid', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': True}]}]]
2017-10-26 16:09:16,900 [DEBUG @ async_session.py:_on_response:95] 76820 - received response: None, [2, {b'version': {b'major': 0, b'api_prerelease': True, b'api_level': 3, b'patch': 1, b'api_compatible': 0, b'minor': 2}, b'ui_events': [{b'name': b'resize', b'since': 3, b'parameters': [[b'Integer', b'rows'], [b'Integer', b'columns']]}, {b'name': b'clear', b'since': 3, b'parameters': []}, {b'name': b'eol_clear', b'since': 3, b'parameters': []}, {b'name': b'cursor_goto', b'since': 3, b'parameters': [[b'Integer', b'row'], [b'Integer', b'col']]}, {b'name': b'mode_info_set', b'since': 3, b'parameters': [[b'Boolean', b'enabled'], [b'Array', b'cursor_styles']]}, {b'name': b'update_menu', b'since': 3, b'parameters': []}, {b'name': b'busy_start', b'since': 3, b'parameters': []}, {b'name': b'busy_stop', b'since': 3, b'parameters': []}, {b'name': b'mouse_on', b'since': 3, b'parameters': []}, {b'name': b'mouse_off', b'since': 3, b'parameters': []}, {b'name': b'mode_change', b'since': 3, b'parameters': [[b'String', b'mode'], [b'Integer', b'mode_idx']]}, {b'name': b'set_scroll_region', b'since': 3, b'parameters': [[b'Integer', b'top'], [b'Integer', b'bot'], [b'Integer', b'left'], [b'Integer', b'right']]}, {b'name': b'scroll', b'since': 3, b'parameters': [[b'Integer', b'count']]}, {b'name': b'highlight_set', b'since': 3, b'parameters': [[b'Dictionary', b'attrs']]}, {b'name': b'put', b'since': 3, b'parameters': [[b'String', b'str']]}, {b'name': b'bell', b'since': 3, b'parameters': []}, {b'name': b'visual_bell', b'since': 3, b'parameters': []}, {b'name': b'flush', b'since': 3, b'parameters': []}, {b'name': b'update_fg', b'since': 3, b'parameters': [[b'Integer', b'fg']]}, {b'name': b'update_bg', b'since': 3, b'parameters': [[b'Integer', b'bg']]}, {b'name': b'update_sp', b'since': 3, b'parameters': [[b'Integer', b'sp']]}, {b'name': b'suspend', b'since': 3, b'parameters': []}, {b'name': b'set_title', b'since': 3, b'parameters': [[b'String', b'title']]}, {b'name': b'set_icon', b'since': 3, b'parameters': [[b'String', b'icon']]}, {b'name': b'popupmenu_show', b'since': 3, b'parameters': [[b'Array', b'items'], [b'Integer', b'selected'], [b'Integer', b'row'], [b'Integer', b'col']]}, {b'name': b'popupmenu_hide', b'since': 3, b'parameters': []}, {b'name': b'popupmenu_select', b'since': 3, b'parameters': [[b'Integer', b'selected']]}, {b'name': b'tabline_update', b'since': 3, b'parameters': [[b'Tabpage', b'current'], [b'Array', b'tabs']]}], b'error_types': {b'Exception': {b'id': 0}, b'Validation': {b'id': 1}}, b'types': {b'Window': {b'id': 1, b'prefix': b'nvim_win_'}, b'Buffer': {b'id': 0, b'prefix': b'nvim_buf_'}, b'Tabpage': {b'id': 2, b'prefix': b'nvim_tabpage_'}}, b'functions': [{b'return_type': b'Integer', b'name': b'nvim_buf_line_count', b'since': 1, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'String', b'deprecated_since': 1, b'name': b'buffer_get_line', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'index']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_set_line', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'index'], [b'String', b'line']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_del_line', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'index']], b'method': False}, {b'return_type': b'ArrayOf(String)', b'deprecated_since': 1, b'name': b'buffer_get_line_slice', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'include_start'], [b'Boolean', b'include_end']], b'method': False}, {b'return_type': b'ArrayOf(String)', b'name': b'nvim_buf_get_lines', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_set_line_slice', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'include_start'], [b'Boolean', b'include_end'], [b'ArrayOf(String)', b'replacement']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_buf_set_lines', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing'], [b'ArrayOf(String)', b'replacement']], b'method': True}, {b'return_type': b'Object', b'name': b'nvim_buf_get_var', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'Integer', b'name': b'nvim_buf_get_changedtick', b'since': 2, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'ArrayOf(Dictionary)', b'name': b'nvim_buf_get_keymap', b'since': 3, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'mode']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_buf_set_var', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_buf_del_var', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'buffer_set_var', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'buffer_del_var', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_buf_get_option', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_buf_set_option', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': True}, {b'return_type': b'Integer', b'deprecated_since': 2, b'name': b'nvim_buf_get_number', b'since': 1, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'String', b'name': b'nvim_buf_get_name', b'since': 1, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_buf_set_name', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'Boolean', b'name': b'nvim_buf_is_valid', b'since': 1, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_insert', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'lnum'], [b'ArrayOf(String)', b'lines']], b'method': False}, {b'return_type': b'ArrayOf(Integer, 2)', b'name': b'nvim_buf_get_mark', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'Integer', b'name': b'nvim_buf_add_highlight', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'String', b'hl_group'], [b'Integer', b'line'], [b'Integer', b'col_start'], [b'Integer', b'col_end']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_buf_clear_highlight', b'since': 1, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'Integer', b'line_start'], [b'Integer', b'line_end']], b'method': True}, {b'return_type': b'ArrayOf(Window)', b'name': b'nvim_tabpage_list_wins', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage']], b'method': True}, {b'return_type': b'Object', b'name': b'nvim_tabpage_get_var', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_tabpage_set_var', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name'], [b'Object', b'value']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_tabpage_del_var', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'tabpage_set_var', b'since': 0, b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'tabpage_del_var', b'since': 0, b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': False}, {b'return_type': b'Window', b'name': b'nvim_tabpage_get_win', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage']], b'method': True}, {b'return_type': b'Integer', b'name': b'nvim_tabpage_get_number', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage']], b'method': True}, {b'return_type': b'Boolean', b'name': b'nvim_tabpage_is_valid', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_ui_attach', b'since': 1, b'parameters': [[b'Integer', b'width'], [b'Integer', b'height'], [b'Dictionary', b'options']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'ui_attach', b'since': 0, b'parameters': [[b'Integer', b'width'], [b'Integer', b'height'], [b'Boolean', b'enable_rgb']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_ui_detach', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'void', b'name': b'nvim_ui_try_resize', b'since': 1, b'parameters': [[b'Integer', b'width'], [b'Integer', b'height']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_ui_set_option', b'since': 1, b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_command', b'since': 1, b'parameters': [[b'String', b'command']], b'method': False}, {b'return_type': b'Dictionary', b'name': b'nvim_get_hl_by_name', b'since': 3, b'parameters': [[b'String', b'name'], [b'Boolean', b'rgb']], b'method': False}, {b'return_type': b'Dictionary', b'name': b'nvim_get_hl_by_id', b'since': 3, b'parameters': [[b'Integer', b'hl_id'], [b'Boolean', b'rgb']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_feedkeys', b'since': 1, b'parameters': [[b'String', b'keys'], [b'String', b'mode'], [b'Boolean', b'escape_csi']], b'method': False}, {b'return_type': b'Integer', b'name': b'nvim_input', b'since': 1, b'parameters': [[b'String', b'keys']], b'method': False}, {b'return_type': b'String', b'name': b'nvim_replace_termcodes', b'since': 1, b'parameters': [[b'String', b'str'], [b'Boolean', b'from_part'], [b'Boolean', b'do_lt'], [b'Boolean', b'special']], b'method': False}, {b'return_type': b'String', b'name': b'nvim_command_output', b'since': 1, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_eval', b'since': 1, b'parameters': [[b'String', b'expr']], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_call_function', b'since': 1, b'parameters': [[b'String', b'fname'], [b'Array', b'args']], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_execute_lua', b'since': 3, b'parameters': [[b'String', b'code'], [b'Array', b'args']], b'method': False}, {b'return_type': b'Integer', b'name': b'nvim_strwidth', b'since': 1, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'ArrayOf(String)', b'name': b'nvim_list_runtime_paths', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'void', b'name': b'nvim_set_current_dir', b'since': 1, b'parameters': [[b'String', b'dir']], b'method': False}, {b'return_type': b'String', b'name': b'nvim_get_current_line', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'void', b'name': b'nvim_set_current_line', b'since': 1, b'parameters': [[b'String', b'line']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_del_current_line', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_get_var', b'since': 1, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_set_var', b'since': 1, b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_del_var', b'since': 1, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'vim_set_var', b'since': 0, b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'vim_del_var', b'since': 0, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_get_vvar', b'since': 1, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_get_option', b'since': 1, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_set_option', b'since': 1, b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_out_write', b'since': 1, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_err_write', b'since': 1, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_err_writeln', b'since': 1, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'ArrayOf(Buffer)', b'name': b'nvim_list_bufs', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'Buffer', b'name': b'nvim_get_current_buf', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'void', b'name': b'nvim_set_current_buf', b'since': 1, b'parameters': [[b'Buffer', b'buffer']], b'method': False}, {b'return_type': b'ArrayOf(Window)', b'name': b'nvim_list_wins', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'Window', b'name': b'nvim_get_current_win', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'void', b'name': b'nvim_set_current_win', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': False}, {b'return_type': b'ArrayOf(Tabpage)', b'name': b'nvim_list_tabpages', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'Tabpage', b'name': b'nvim_get_current_tabpage', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'void', b'name': b'nvim_set_current_tabpage', b'since': 1, b'parameters': [[b'Tabpage', b'tabpage']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_subscribe', b'since': 1, b'parameters': [[b'String', b'event']], b'method': False}, {b'return_type': b'void', b'name': b'nvim_unsubscribe', b'since': 1, b'parameters': [[b'String', b'event']], b'method': False}, {b'return_type': b'Integer', b'name': b'nvim_get_color_by_name', b'since': 1, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'Dictionary', b'name': b'nvim_get_color_map', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'Dictionary', b'name': b'nvim_get_mode', b'since': 2, b'parameters': [], b'method': False}, {b'return_type': b'ArrayOf(Dictionary)', b'name': b'nvim_get_keymap', b'since': 3, b'parameters': [[b'String', b'mode']], b'method': False}, {b'return_type': b'Array', b'name': b'nvim_get_api_info', b'since': 1, b'parameters': [], b'method': False}, {b'return_type': b'Array', b'name': b'nvim_call_atomic', b'since': 1, b'parameters': [[b'Array', b'calls']], b'method': False}, {b'return_type': b'Buffer', b'name': b'nvim_win_get_buf', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'ArrayOf(Integer, 2)', b'name': b'nvim_win_get_cursor', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_win_set_cursor', b'since': 1, b'parameters': [[b'Window', b'window'], [b'ArrayOf(Integer, 2)', b'pos']], b'method': True}, {b'return_type': b'Integer', b'name': b'nvim_win_get_height', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_win_set_height', b'since': 1, b'parameters': [[b'Window', b'window'], [b'Integer', b'height']], b'method': True}, {b'return_type': b'Integer', b'name': b'nvim_win_get_width', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_win_set_width', b'since': 1, b'parameters': [[b'Window', b'window'], [b'Integer', b'width']], b'method': True}, {b'return_type': b'Object', b'name': b'nvim_win_get_var', b'since': 1, b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_win_set_var', b'since': 1, b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_win_del_var', b'since': 1, b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'window_set_var', b'since': 0, b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'window_del_var', b'since': 0, b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': False}, {b'return_type': b'Object', b'name': b'nvim_win_get_option', b'since': 1, b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True}, {b'return_type': b'void', b'name': b'nvim_win_set_option', b'since': 1, b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': True}, {b'return_type': b'ArrayOf(Integer, 2)', b'name': b'nvim_win_get_position', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'Tabpage', b'name': b'nvim_win_get_tabpage', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'Integer', b'name': b'nvim_win_get_number', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'Boolean', b'name': b'nvim_win_is_valid', b'since': 1, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'buffer_line_count', b'since': 0, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'ArrayOf(String)', b'deprecated_since': 1, b'name': b'buffer_get_lines', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_set_lines', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing'], [b'ArrayOf(String)', b'replacement']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'buffer_get_var', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'buffer_get_option', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_set_option', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': True}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'buffer_get_number', b'since': 0, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'String', b'deprecated_since': 1, b'name': b'buffer_get_name', b'since': 0, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_set_name', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'Boolean', b'deprecated_since': 1, b'name': b'buffer_is_valid', b'since': 0, b'parameters': [[b'Buffer', b'buffer']], b'method': True}, {b'return_type': b'ArrayOf(Integer, 2)', b'deprecated_since': 1, b'name': b'buffer_get_mark', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'buffer_add_highlight', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'String', b'hl_group'], [b'Integer', b'line'], [b'Integer', b'col_start'], [b'Integer', b'col_end']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'buffer_clear_highlight', b'since': 0, b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'Integer', b'line_start'], [b'Integer', b'line_end']], b'method': True}, {b'return_type': b'ArrayOf(Window)', b'deprecated_since': 1, b'name': b'tabpage_get_windows', b'since': 0, b'parameters': [[b'Tabpage', b'tabpage']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'tabpage_get_var', b'since': 0, b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': True}, {b'return_type': b'Window', b'deprecated_since': 1, b'name': b'tabpage_get_window', b'since': 0, b'parameters': [[b'Tabpage', b'tabpage']], b'method': True}, {b'return_type': b'Boolean', b'deprecated_since': 1, b'name': b'tabpage_is_valid', b'since': 0, b'parameters': [[b'Tabpage', b'tabpage']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'ui_detach', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'ui_try_resize', b'since': 0, b'parameters': [[b'Integer', b'width'], [b'Integer', b'height']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_command', b'since': 0, b'parameters': [[b'String', b'command']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_feedkeys', b'since': 0, b'parameters': [[b'String', b'keys'], [b'String', b'mode'], [b'Boolean', b'escape_csi']], b'method': False}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'vim_input', b'since': 0, b'parameters': [[b'String', b'keys']], b'method': False}, {b'return_type': b'String', b'deprecated_since': 1, b'name': b'vim_replace_termcodes', b'since': 0, b'parameters': [[b'String', b'str'], [b'Boolean', b'from_part'], [b'Boolean', b'do_lt'], [b'Boolean', b'special']], b'method': False}, {b'return_type': b'String', b'deprecated_since': 1, b'name': b'vim_command_output', b'since': 0, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'vim_eval', b'since': 0, b'parameters': [[b'String', b'expr']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'vim_call_function', b'since': 0, b'parameters': [[b'String', b'fname'], [b'Array', b'args']], b'method': False}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'vim_strwidth', b'since': 0, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'ArrayOf(String)', b'deprecated_since': 1, b'name': b'vim_list_runtime_paths', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_change_directory', b'since': 0, b'parameters': [[b'String', b'dir']], b'method': False}, {b'return_type': b'String', b'deprecated_since': 1, b'name': b'vim_get_current_line', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_set_current_line', b'since': 0, b'parameters': [[b'String', b'line']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_del_current_line', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'vim_get_var', b'since': 0, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'vim_get_vvar', b'since': 0, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'vim_get_option', b'since': 0, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_set_option', b'since': 0, b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_out_write', b'since': 0, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_err_write', b'since': 0, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_report_error', b'since': 0, b'parameters': [[b'String', b'str']], b'method': False}, {b'return_type': b'ArrayOf(Buffer)', b'deprecated_since': 1, b'name': b'vim_get_buffers', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'Buffer', b'deprecated_since': 1, b'name': b'vim_get_current_buffer', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_set_current_buffer', b'since': 0, b'parameters': [[b'Buffer', b'buffer']], b'method': False}, {b'return_type': b'ArrayOf(Window)', b'deprecated_since': 1, b'name': b'vim_get_windows', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'Window', b'deprecated_since': 1, b'name': b'vim_get_current_window', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_set_current_window', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': False}, {b'return_type': b'ArrayOf(Tabpage)', b'deprecated_since': 1, b'name': b'vim_get_tabpages', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'Tabpage', b'deprecated_since': 1, b'name': b'vim_get_current_tabpage', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_set_current_tabpage', b'since': 0, b'parameters': [[b'Tabpage', b'tabpage']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_subscribe', b'since': 0, b'parameters': [[b'String', b'event']], b'method': False}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'vim_unsubscribe', b'since': 0, b'parameters': [[b'String', b'event']], b'method': False}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'vim_name_to_color', b'since': 0, b'parameters': [[b'String', b'name']], b'method': False}, {b'return_type': b'Dictionary', b'deprecated_since': 1, b'name': b'vim_get_color_map', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'Array', b'deprecated_since': 1, b'name': b'vim_get_api_info', b'since': 0, b'parameters': [], b'method': False}, {b'return_type': b'Buffer', b'deprecated_since': 1, b'name': b'window_get_buffer', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'ArrayOf(Integer, 2)', b'deprecated_since': 1, b'name': b'window_get_cursor', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'window_set_cursor', b'since': 0, b'parameters': [[b'Window', b'window'], [b'ArrayOf(Integer, 2)', b'pos']], b'method': True}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'window_get_height', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'window_set_height', b'since': 0, b'parameters': [[b'Window', b'window'], [b'Integer', b'height']], b'method': True}, {b'return_type': b'Integer', b'deprecated_since': 1, b'name': b'window_get_width', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'window_set_width', b'since': 0, b'parameters': [[b'Window', b'window'], [b'Integer', b'width']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'window_get_var', b'since': 0, b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True}, {b'return_type': b'Object', b'deprecated_since': 1, b'name': b'window_get_option', b'since': 0, b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True}, {b'return_type': b'void', b'deprecated_since': 1, b'name': b'window_set_option', b'since': 0, b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': True}, {b'return_type': b'ArrayOf(Integer, 2)', b'deprecated_since': 1, b'name': b'window_get_position', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'Tabpage', b'deprecated_since': 1, b'name': b'window_get_tabpage', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': True}, {b'return_type': b'Boolean', b'deprecated_since': 1, b'name': b'window_is_valid', b'since': 0, b'parameters': [[b'Window', b'window']], b'method': True}]}]
2017-10-26 16:09:16,901 [DEBUG @ base.py:stop:149] 76820 - Stopped event loop
2017-10-26 16:09:16,901 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:16,902 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:16,902 [DEBUG @ base.py:run:140] 76820 - Exited event loop
2017-10-26 16:09:16,950 [DEBUG @ session.py:_on_request:201] 76820 - received rpc request, greenlet <greenlet.greenlet object at 0x1022bbaf8> will handle it
2017-10-26 16:09:16,950 [DEBUG @ host.py:_on_request:91] 76820 - calling request handler for "poll", args: "[]"
2017-10-26 16:09:16,951 [DEBUG @ host.py:_on_request:93] 76820 - request handler for 'poll []' returns: ok
2017-10-26 16:09:16,951 [DEBUG @ session.py:handler:187] 76820 - greenlet <greenlet.greenlet object at 0x1022bbaf8> finished executing, sending ok as response
2017-10-26 16:09:16,951 [DEBUG @ async_session.py:send:133] 76820 - sending response to request 1: [1, 1, None, 'ok']
2017-10-26 16:09:16,951 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [1, 1, None, 'ok']
2017-10-26 16:09:16,951 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x01\x01\xc0\xa2ok''
2017-10-26 16:09:16,951 [DEBUG @ session.py:handler:197] 76820 - greenlet <greenlet.greenlet object at 0x1022bbaf8> is now dying...
2017-10-26 16:09:16,952 [DEBUG @ base.py:run:138] 76820 - Entering event loop
2017-10-26 16:09:16,953 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:16,954 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [2, b'/Users/AMC/.vim/.cache/init.vim/.dein/rplugin/python3/deoplete:function:_deoplete_init', [[]]]
2017-10-26 16:09:16,954 [DEBUG @ async_session.py:_on_notification:102] 76820 - received notification: b'/Users/AMC/.vim/.cache/init.vim/.dein/rplugin/python3/deoplete:function:_deoplete_init', [[]]
2017-10-26 16:09:16,954 [DEBUG @ session.py:_on_notification:216] 76820 - received rpc notification, greenlet <greenlet.greenlet object at 0x1022bbaf8> will handle it
2017-10-26 16:09:16,954 [DEBUG @ host.py:_on_notification:107] 76820 - calling notification handler for "/Users/AMC/.vim/.cache/init.vim/.dein/rplugin/python3/deoplete:function:_deoplete_init", args: "[[]]"
2017-10-26 16:09:16,954 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 2, 'nvim_call_function', ('deoplete#init#_context', ['Init', []])]
2017-10-26 16:09:16,955 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\x02\xb2nvim_call_function\x92\xb6deoplete#init#_context\x92\xa4Init\x90''
2017-10-26 16:09:16,955 [DEBUG @ session.py:_yielding_request:153] 76820 - yielding from greenlet <greenlet.greenlet object at 0x1022bbaf8> to wait for response
2017-10-26 16:09:16,955 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:16,955 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,023 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,024 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [1, 2, None, {b'custom': {b'source': {b'buffer': {b'mark': b'\xe2\x84\xac'}, b'omni': {b'mark': b'\xe2\x8c\xbe'}, b'jedi': {b'mark': b'\xee\x98\x86'}, b'_': {b'matchers': [b'matcher_full_fuzzy']}, b'ternjs': {b'mark': b'\xee\x98\x8c'}, b'neosnippet': {b'mark': b'\xef\x91\x88'}, b'file': {b'mark': b'file'}, b'typescript': {b'rank': 630, b'mark': b'\xee\x98\xa8'}}}, b'delay': 50, b'encoding': b'utf-8', b'position': [0, 93, 1, 0], b'bufvars': {}, b'sources': [], b'max_kind_width': 22, b'camelcase': 1, b'ignorecase': 1, b'bufname': b'bashrc', b'changedtick': 3, b'smartcase': 1, b'keyword_patterns': b'[a-zA-Z_][a-zA-Z@0-9_\xc3\x80-\xc3\xbf]*', b'same_filetypes': [], b'complete_str': b'', b'dict__dictionary': b'', b'bufsize': 11713, b'input': b'', b'next_input': b"alias runvice='termsaver rssfeed --url=https://www.vice.com/en_us/rss'", b'filetypes': [b'sh'], b'omni__omnifunc': b'', b'filetype': b'sh', b'bufnr': 1, b'runtimepath': b'/Users/AMC/.config/nvim,/etc/xdg/nvim,/Users/AMC/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/Users/AMC/.config/nvim/repos/github.com/ternjs/tern_for_vim,/Users/AMC/Documents/EditorThemes/fraw/themer-vim,/Users/AMC/.config/nvim/repos/github.com/zchee/deoplete-go,/Users/AMC/.config/nvim/repos/github.com/Shougo/dein.vim,/Users/AMC/.config/nvim/repos/github.com/neomake/neomake,/Users/AMC/.config/nvim/.cache/init.vim/.dein,/usr/local/Cellar/neovim/HEAD-f0c2f82_1/share/nvim/runtime,/Users/AMC/.config/nvim/repos/github.com/ternjs/tern_for_vim/after,/Users/AMC/.config/nvim/.cache/init.vim/.dein/after,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/AMC/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/AMC/.config/nvim/after,/Users/AMC/.config/nvim/repos/github.com/Shougo/dein.vim/', b'bufpath': b'/Users/AMC/.dotfiles/bashrc', b'max_abbr_width': 22, b'max_menu_width': 22, b'cwd': b'/Users/AMC/.dotfiles', b'vars': {b'deoplete#sources#ternjs#depths': 1, b'deoplete#sources#ternjs#case_insensitive': 1, b'deoplete#sources#go#pointer': 0, b'deoplete#sources#go#json_directory': b'', b'deoplete#sources#ternjs#sort': 0, b'deoplete#sources#go#align_class': 0, b'deoplete#_keyword_patterns': {b'_': b'[a-zA-Z_]\\k*'}, b'deoplete#_rank': {}, b'deoplete#_omni_patterns': {b'html': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xhtml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*']}, b'deoplete#auto_complete_delay': 50, b'deoplete#member#prefix_patterns': {}, b'deoplete#complete_method': b'complete', b'deoplete#sources#go#cgo': 0, b'deoplete#keyword_patterns': {}, b'deoplete#delimiters': [b'/'], b'deoplete#sources#go#package_dot': 0, b'deoplete#omni#functions': {}, b'deoplete#enable_at_startup': 1, b'deoplete#sources#go#gocode_binary': b'', b'deoplete#sources#go#on_event': 0, b'deoplete#sources#go#sort_class': [], b'deoplete#max_list': 100, b'deoplete#enable_refresh_always': 1, b'deoplete#file#enable_buffer_path': 1, b'deoplete#enable_profile': 0, b'deoplete#sources#ternjs#filetypes': [b'jsx', b'javascript.jsx', b'vue', b'...'], b'deoplete#sources#ternjs#tern_bin': b'/usr/local/bin/tern', b'deoplete#max_menu_width': 0, b'deoplete#sources#ternjs#types': 1, b'deoplete#auto_refresh_delay': 500, b'deoplete#enable_ignore_case': 1, b'deoplete#omni_patterns': {b'html': b''}, b'deoplete#omni#input_patterns': {}, b'deoplete#max_abbr_width': 0, b'deoplete#enable_camel_case': 1, b'deoplete#enable_smart_case': 1, b'deoplete#_context': {}, b'deoplete#auto_complete_start_length': 2, b'deoplete#sources#go#use_cache': 0, b'deoplete#sources': {}, b'deoplete#skip_chars': [], b'deoplete#disable_auto_complete': 0, b'deoplete#ignore_sources': {b'_': [b'around']}, b'deoplete#_logging': {}}, b'event': b'Init'}]
2017-10-26 16:09:17,024 [DEBUG @ async_session.py:_on_response:95] 76820 - received response: None, {b'custom': {b'source': {b'buffer': {b'mark': b'\xe2\x84\xac'}, b'omni': {b'mark': b'\xe2\x8c\xbe'}, b'jedi': {b'mark': b'\xee\x98\x86'}, b'_': {b'matchers': [b'matcher_full_fuzzy']}, b'ternjs': {b'mark': b'\xee\x98\x8c'}, b'neosnippet': {b'mark': b'\xef\x91\x88'}, b'file': {b'mark': b'file'}, b'typescript': {b'rank': 630, b'mark': b'\xee\x98\xa8'}}}, b'delay': 50, b'encoding': b'utf-8', b'position': [0, 93, 1, 0], b'bufvars': {}, b'sources': [], b'max_kind_width': 22, b'camelcase': 1, b'ignorecase': 1, b'bufname': b'bashrc', b'changedtick': 3, b'smartcase': 1, b'keyword_patterns': b'[a-zA-Z_][a-zA-Z@0-9_\xc3\x80-\xc3\xbf]*', b'same_filetypes': [], b'complete_str': b'', b'dict__dictionary': b'', b'bufsize': 11713, b'input': b'', b'next_input': b"alias runvice='termsaver rssfeed --url=https://www.vice.com/en_us/rss'", b'filetypes': [b'sh'], b'omni__omnifunc': b'', b'filetype': b'sh', b'bufnr': 1, b'runtimepath': b'/Users/AMC/.config/nvim,/etc/xdg/nvim,/Users/AMC/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/Users/AMC/.config/nvim/repos/github.com/ternjs/tern_for_vim,/Users/AMC/Documents/EditorThemes/fraw/themer-vim,/Users/AMC/.config/nvim/repos/github.com/zchee/deoplete-go,/Users/AMC/.config/nvim/repos/github.com/Shougo/dein.vim,/Users/AMC/.config/nvim/repos/github.com/neomake/neomake,/Users/AMC/.config/nvim/.cache/init.vim/.dein,/usr/local/Cellar/neovim/HEAD-f0c2f82_1/share/nvim/runtime,/Users/AMC/.config/nvim/repos/github.com/ternjs/tern_for_vim/after,/Users/AMC/.config/nvim/.cache/init.vim/.dein/after,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/AMC/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/AMC/.config/nvim/after,/Users/AMC/.config/nvim/repos/github.com/Shougo/dein.vim/', b'bufpath': b'/Users/AMC/.dotfiles/bashrc', b'max_abbr_width': 22, b'max_menu_width': 22, b'cwd': b'/Users/AMC/.dotfiles', b'vars': {b'deoplete#sources#ternjs#depths': 1, b'deoplete#sources#ternjs#case_insensitive': 1, b'deoplete#sources#go#pointer': 0, b'deoplete#sources#go#json_directory': b'', b'deoplete#sources#ternjs#sort': 0, b'deoplete#sources#go#align_class': 0, b'deoplete#_keyword_patterns': {b'_': b'[a-zA-Z_]\\k*'}, b'deoplete#_rank': {}, b'deoplete#_omni_patterns': {b'html': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xhtml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*']}, b'deoplete#auto_complete_delay': 50, b'deoplete#member#prefix_patterns': {}, b'deoplete#complete_method': b'complete', b'deoplete#sources#go#cgo': 0, b'deoplete#keyword_patterns': {}, b'deoplete#delimiters': [b'/'], b'deoplete#sources#go#package_dot': 0, b'deoplete#omni#functions': {}, b'deoplete#enable_at_startup': 1, b'deoplete#sources#go#gocode_binary': b'', b'deoplete#sources#go#on_event': 0, b'deoplete#sources#go#sort_class': [], b'deoplete#max_list': 100, b'deoplete#enable_refresh_always': 1, b'deoplete#file#enable_buffer_path': 1, b'deoplete#enable_profile': 0, b'deoplete#sources#ternjs#filetypes': [b'jsx', b'javascript.jsx', b'vue', b'...'], b'deoplete#sources#ternjs#tern_bin': b'/usr/local/bin/tern', b'deoplete#max_menu_width': 0, b'deoplete#sources#ternjs#types': 1, b'deoplete#auto_refresh_delay': 500, b'deoplete#enable_ignore_case': 1, b'deoplete#omni_patterns': {b'html': b''}, b'deoplete#omni#input_patterns': {}, b'deoplete#max_abbr_width': 0, b'deoplete#enable_camel_case': 1, b'deoplete#enable_smart_case': 1, b'deoplete#_context': {}, b'deoplete#auto_complete_start_length': 2, b'deoplete#sources#go#use_cache': 0, b'deoplete#sources': {}, b'deoplete#skip_chars': [], b'deoplete#disable_auto_complete': 0, b'deoplete#ignore_sources': {b'_': [b'around']}, b'deoplete#_logging': {}}, b'event': b'Init'}
2017-10-26 16:09:17,024 [DEBUG @ session.py:response_cb:149] 76820 - response is available for greenlet <greenlet.greenlet object at 0x1022bbaf8>, switching back
2017-10-26 16:09:17,105 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 3, 'nvim_eval', ('values(neosnippet#helpers#get_completion_snippets())',)]
2017-10-26 16:09:17,105 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\x03\xa9nvim_eval\x91\xda\x004values(neosnippet#helpers#get_completion_snippets())''
2017-10-26 16:09:17,106 [DEBUG @ session.py:_yielding_request:153] 76820 - yielding from greenlet <greenlet.greenlet object at 0x1022bbaf8> to wait for response
2017-10-26 16:09:17,106 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,106 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,216 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,216 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,216 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,217 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,217 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,217 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [1, 3, None, [{b'action__pattern': b'^snippet\\s\\+assign$', b'menu_template': b'var-assign', b'snip': b'${1:name}="${2:something}"${0}', b'description': b'${1:name}="${2:something}"${0}', b'menu_abbr': b'var-assign', b'real_name': b'assign', b'word': b'assign', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 74, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 1}}, {b'action__pattern': b'^snippet\\s\\+function$', b'menu_template': b'${1:#:name}()  {  ${0: }  }', b'snip': b'${1:#:name}()\n\t{\n\t\t${0:TARGET}\n\t}', b'description': b'${1:#:name}()\n\t{\n\t\t${0:TARGET}\n\t}', b'menu_abbr': b'${1:#:name}()  {  ${0: }  }', b'real_name': b'function', b'word': b'func', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 60, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+el$', b'menu_template': b'else  ${0: }', b'snip': b'else\n\t\t${0:TARGET}', b'description': b'else\n\t\t${0:TARGET}', b'menu_abbr': b'else  ${0: }', b'real_name': b'el', b'word': b'el', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 15, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+env$', b'menu_template': b'#!/usr/bin/env ${1}', b'snip': b'#!/usr/bin/env ${1}', b'description': b'#!/usr/bin/env ${1}', b'menu_abbr': b'#!/usr/bin/env ${1}', b'real_name': b'env', b'word': b'env', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 49, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+#!$', b'menu_template': b'#!/bin/sh', b'snip': b'#!/bin/${1:sh}\n\t${0}', b'description': b'#!/bin/${1:sh}\n\t${0}', b'menu_abbr': b'#!/bin/sh', b'real_name': b'#!', b'word': b'shebang', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 1, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 1}}, {b'action__pattern': b'^snippet\\s\\+basename$', b'menu_template': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'snip': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'description': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'menu_abbr': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'real_name': b'basename', b'word': b'bname', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 40, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+until$', b'menu_template': b'until ${1:#:condition} ; do  ${0: }  done', b'snip': b'until ${1:#:condition} ; do\n\t\t${0:TARGET}\n\tdone', b'description': b'until ${1:#:condition} ; do\n\t\t${0:TARGET}\n\tdone', b'menu_abbr': b'until ${1:#:condition} ; do  ${0: }  done', b'real_name': b'until', b'word': b'until', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 37, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+filename_upper_camel$', b'menu_template': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'snip': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'description': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'menu_abbr': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'real_name': b'filename_upper_camel', b'word': b'filename_upper_camel', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 45, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+lastmod$', b'menu_template': b'Last modified time', b'snip': b'Last Modified: `strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'description': b'Last Modified: `strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'menu_abbr': b'Last modified time', b'real_name': b'lastmod', b'word': b'lmod', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 22, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+while$', b'menu_template': b'while ${1:#:condition} ; do  ${0: }  done', b'snip': b'while ${1:#:condition} ; do\n\t\t${0:TARGET}\n\tdone', b'description': b'while ${1:#:condition} ; do\n\t\t${0:TARGET}\n\tdone', b'menu_abbr': b'while ${1:#:condition} ; do  ${0: }  done', b'real_name': b'while', b'word': b'while', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 30, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+if$', b'menu_template': b'if [ ${1:#:condition} ]; then  ${0: }  fi', b'snip': b'if [ ${1:#:condition} ]; then\n\t\t${0:TARGET}\n\tfi', b'description': b'if [ ${1:#:condition} ]; then\n\t\t${0:TARGET}\n\tfi', b'menu_abbr': b'if [ ${1:#:condition} ]; then  ${0: }  fi', b'real_name': b'if', b'word': b'if', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 9, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+path$', b'menu_template': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:p') : expand('%:p'), '//\\+', '/', 'g')`${0}", b'snip': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:p') : expand('%:p'), '//\\+', '/', 'g')`${0}", b'description': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:p') : expand('%:p'), '//\\+', '/', 'g')`${0}", b'menu_abbr': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:p') : expand('%:p'), '//\\+', '/', 'g')`${0}", b'real_name': b'path', b'word': b'path', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 32, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+date_english$', b'menu_template': b'`strftime("%d %b %Y")`${0}', b'snip': b'`strftime("%d %b %Y")`${0}', b'description': b'`strftime("%d %b %Y")`${0}', b'menu_abbr': b'`strftime("%d %b %Y")`${0}', b'real_name': b'date_english', b'word': b'date_english', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 3, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+date_iso8601$', b'menu_template': b'`strftime("%Y-%m-%d")`${0}', b'snip': b'`strftime("%Y-%m-%d")`${0}', b'description': b'`strftime("%Y-%m-%d")`${0}', b'menu_abbr': b'`strftime("%Y-%m-%d")`${0}', b'real_name': b'date_iso8601', b'word': b'dd', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 12, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+datetime_iso8601$', b'menu_template': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'snip': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'description': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'menu_abbr': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'real_name': b'datetime_iso8601', b'word': b'df', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 7, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+filename$', b'menu_template': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'snip': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'description': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'menu_abbr': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'real_name': b'filename', b'word': b'fname', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 27, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+warn$', b'menu_template': b'echo "${0: }" 1>&2', b'snip': b'echo "${0:TARGET}" 1>&2', b'description': b'echo "${0:TARGET}" 1>&2', b'menu_abbr': b'echo "${0: }" 1>&2', b'real_name': b'warn', b'word': b'warn', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 89, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 1}}, {b'action__pattern': b'^snippet\\s\\+tmp$', b'menu_template': b'${1:TMPFILE}=$(mktemp ${2:XXX})  trap "rm -f \'${$1}\'" 0 # EXIT  trap "rm -f \'${$1}\'; exit 1" 2 # INT  trap "rm -f \'${$1}\'; exit 1" 1 15 # HUP TERM  ${0}', b'snip': b'${1:TMPFILE}=$(mktemp ${2:XXX})\n\ttrap "rm -f \'${$1}\'" 0               # EXIT\n\ttrap "rm -f \'${$1}\'; exit 1" 2       # INT\n\ttrap "rm -f \'${$1}\'; exit 1" 1 15    # HUP TERM\n\t${0}', b'description': b'${1:TMPFILE}=$(mktemp ${2:XXX})\n\ttrap "rm -f \'${$1}\'" 0               # EXIT\n\ttrap "rm -f \'${$1}\'; exit 1" 2       # INT\n\ttrap "rm -f \'${$1}\'; exit 1" 1 15    # HUP TERM\n\t${0}', b'menu_abbr': b'${1:TMPFILE}=$(mktemp ${2:XXX})  trap "rm -f \'${$1}\'" 0 # EXIT  trap "rm -f \'${$1}\'; exit 1" 2 # INT  trap "rm -f \'${$1}\'; exit 1" 1 15 # HUP TERM  ${0}', b'real_name': b'tmp', b'word': b'tmp', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 53, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+elif$', b'menu_template': b'elif [ ${1:#:condition} ]; then  ${0: }', b'snip': b'elif [ ${1:#:condition} ]; then\n\t\t${0:TARGET}', b'description': b'elif [ ${1:#:condition} ]; then\n\t\t${0:TARGET}', b'menu_abbr': b'elif [ ${1:#:condition} ]; then  ${0: }', b'real_name': b'elif', b'word': b'elif', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 20, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+filename_lower_camel$', b'menu_template': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'snip': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'description': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'menu_abbr': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'real_name': b'filename_lower_camel', b'word': b'fnamelc', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 50, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+while$', b'menu_template': b'while ${1:#:condition} ; do  ${0: }  done', b'snip': b'while ${1:#:condition} ; do\n\t\t${0:TARGET}\n\tdone', b'description': b'while ${1:#:condition} ; do\n\t\t${0:TARGET}\n\tdone', b'menu_abbr': b'while ${1:#:condition} ; do  ${0: }  done', b'real_name': b'while', b'word': b'wh', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 30, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+filename$', b'menu_template': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'snip': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'description': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'menu_abbr': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'real_name': b'filename', b'word': b'filename', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 27, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+heredoc$', b'menu_template': b'<< ${1:EOF}  ${0:#: }  $1', b'snip': b'<< ${1:EOF}\n\t\t${0:#:TARGET}\n\t$1', b'description': b'<< ${1:EOF}\n\t\t${0:#:TARGET}\n\t$1', b'menu_abbr': b'<< ${1:EOF}  ${0:#: }  $1', b'real_name': b'heredoc', b'word': b'heredoc', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 43, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+rpath$', b'menu_template': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:h') : expand('%:h'), '\\(//*\\|/*$\\)', '/', 'g')`${0}", b'snip': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:h') : expand('%:h'), '\\(//*\\|/*$\\)', '/', 'g')`${0}", b'description': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:h') : expand('%:h'), '\\(//*\\|/*$\\)', '/', 'g')`${0}", b'menu_abbr': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:h') : expand('%:h'), '\\(//*\\|/*$\\)', '/', 'g')`${0}", b'real_name': b'rpath', b'word': b'rpath', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 36, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+time_colon$', b'menu_template': b'`strftime("%H:%M:%S")`${0}', b'snip': b'`strftime("%H:%M:%S")`${0}', b'description': b'`strftime("%H:%M:%S")`${0}', b'menu_abbr': b'`strftime("%H:%M:%S")`${0}', b'real_name': b'time_colon', b'word': b'dt', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 17, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+lastmod$', b'menu_template': b'Last modified time', b'snip': b'Last Modified: `strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'description': b'Last Modified: `strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'menu_abbr': b'Last modified time', b'real_name': b'lastmod', b'word': b'lastmod', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 22, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+date_iso8601$', b'menu_template': b'`strftime("%Y-%m-%d")`${0}', b'snip': b'`strftime("%Y-%m-%d")`${0}', b'description': b'`strftime("%Y-%m-%d")`${0}', b'menu_abbr': b'`strftime("%Y-%m-%d")`${0}', b'real_name': b'date_iso8601', b'word': b'date_iso8601', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 12, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+abort$', b'menu_template': b'echo "${0: }" 1>&2  exit 1', b'snip': b'echo "${0:TARGET}" 1>&2\n\texit 1', b'description': b'echo "${0:TARGET}" 1>&2\n\texit 1', b'menu_abbr': b'echo "${0: }" 1>&2  exit 1', b'real_name': b'abort', b'word': b'abort', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 93, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 1}}, {b'action__pattern': b'^snippet\\s\\+filename_lower_camel$', b'menu_template': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'snip': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'description': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'menu_abbr': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'real_name': b'filename_lower_camel', b'word': b'filename_lower_camel', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 50, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+filename_upper_camel$', b'menu_template': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'snip': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'description': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'menu_abbr': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'real_name': b'filename_upper_camel', b'word': b'fnameuc', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 45, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+#!$', b'menu_template': b'#!/bin/sh', b'snip': b'#!/bin/${1:sh}\n\t${0}', b'description': b'#!/bin/${1:sh}\n\t${0}', b'menu_abbr': b'#!/bin/sh', b'real_name': b'#!', b'word': b'#!', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 1, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 1}}, {b'action__pattern': b'^snippet\\s\\+heredoc$', b'menu_template': b'<< ${1:EOF}  ${0:#: }  $1', b'snip': b'<< ${1:EOF}\n\t\t${0:#:TARGET}\n\t$1', b'description': b'<< ${1:EOF}\n\t\t${0:#:TARGET}\n\t$1', b'menu_abbr': b'<< ${1:EOF}  ${0:#: }  $1', b'real_name': b'heredoc', b'word': b'h', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 43, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+datetime_iso8601$', b'menu_template': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'snip': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'description': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'menu_abbr': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'real_name': b'datetime_iso8601', b'word': b'datetime_iso8601', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 7, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+for$', b'menu_template': b'for ${1:i} in ${2:#:words}; do  ${0: }  done', b'snip': b'for ${1:i} in ${2:#:words}; do\n\t\t${0:TARGET}\n\tdone', b'description': b'for ${1:i} in ${2:#:words}; do\n\t\t${0:TARGET}\n\tdone', b'menu_abbr': b'for ${1:i} in ${2:#:words}; do  ${0: }  done', b'real_name': b'for', b'word': b'for', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 25, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+case$', b'menu_template': b'case "$${1:{name\\}}" in  ${2:pattern*})  ${0}  ;;  *)  ${3:echo "$$1 Didn\'t match anything"}  esac', b'snip': b'case "$${1:{name\\}}" in\n\t\t${2:pattern*})\n\t\t\t${0}\n\t\t\t;;\n\t\t*)\n\t\t\t${3:echo "$$1 Didn\'t match anything"}\n\tesac', b'description': b'case "$${1:{name\\}}" in\n\t\t${2:pattern*})\n\t\t\t${0}\n\t\t\t;;\n\t\t*)\n\t\t\t${3:echo "$$1 Didn\'t match anything"}\n\tesac', b'menu_abbr': b'case "$${1:{name\\}}" in  ${2:pattern*})  ${0}  ;;  *)  ${3:echo "$$1 Didn\'t match anything"}  esac', b'real_name': b'case', b'word': b'case', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 79, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 1}}, {b'action__pattern': b'^snippet\\s\\+heredoc$', b'menu_template': b'<< ${1:EOF}  ${0:#: }  $1', b'snip': b'<< ${1:EOF}\n\t\t${0:#:TARGET}\n\t$1', b'description': b'<< ${1:EOF}\n\t\t${0:#:TARGET}\n\t$1', b'menu_abbr': b'<< ${1:EOF}  ${0:#: }  $1', b'real_name': b'heredoc', b'word': b'<<', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 43, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+function$', b'menu_template': b'${1:#:name}()  {  ${0: }  }', b'snip': b'${1:#:name}()\n\t{\n\t\t${0:TARGET}\n\t}', b'description': b'${1:#:name}()\n\t{\n\t\t${0:TARGET}\n\t}', b'menu_abbr': b'${1:#:name}()  {  ${0: }  }', b'real_name': b'function', b'word': b'function', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 60, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+time_colon$', b'menu_template': b'`strftime("%H:%M:%S")`${0}', b'snip': b'`strftime("%H:%M:%S")`${0}', b'description': b'`strftime("%H:%M:%S")`${0}', b'menu_abbr': b'`strftime("%H:%M:%S")`${0}', b'real_name': b'time_colon', b'word': b'time_colon', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 17, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+basename$', b'menu_template': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'snip': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'description': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'menu_abbr': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'real_name': b'basename', b'word': b'basename', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 40, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+match-regexp$', b'menu_template': b'=~', b'snip': b'if [[ $${1:string} =~ ${2:^regexp.*} ]]; then\n\t\t${0}\n\tfi', b'description': b'if [[ $${1:string} =~ ${2:^regexp.*} ]]; then\n\t\t${0}\n\tfi', b'menu_abbr': b'=~', b'real_name': b'match-regexp', b'word': b'match-regexp', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 67, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 1}}]]
2017-10-26 16:09:17,219 [DEBUG @ async_session.py:_on_response:95] 76820 - received response: None, [{b'action__pattern': b'^snippet\\s\\+assign$', b'menu_template': b'var-assign', b'snip': b'${1:name}="${2:something}"${0}', b'description': b'${1:name}="${2:something}"${0}', b'menu_abbr': b'var-assign', b'real_name': b'assign', b'word': b'assign', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 74, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 1}}, {b'action__pattern': b'^snippet\\s\\+function$', b'menu_template': b'${1:#:name}()  {  ${0: }  }', b'snip': b'${1:#:name}()\n\t{\n\t\t${0:TARGET}\n\t}', b'description': b'${1:#:name}()\n\t{\n\t\t${0:TARGET}\n\t}', b'menu_abbr': b'${1:#:name}()  {  ${0: }  }', b'real_name': b'function', b'word': b'func', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 60, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+el$', b'menu_template': b'else  ${0: }', b'snip': b'else\n\t\t${0:TARGET}', b'description': b'else\n\t\t${0:TARGET}', b'menu_abbr': b'else  ${0: }', b'real_name': b'el', b'word': b'el', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 15, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+env$', b'menu_template': b'#!/usr/bin/env ${1}', b'snip': b'#!/usr/bin/env ${1}', b'description': b'#!/usr/bin/env ${1}', b'menu_abbr': b'#!/usr/bin/env ${1}', b'real_name': b'env', b'word': b'env', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 49, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+#!$', b'menu_template': b'#!/bin/sh', b'snip': b'#!/bin/${1:sh}\n\t${0}', b'description': b'#!/bin/${1:sh}\n\t${0}', b'menu_abbr': b'#!/bin/sh', b'real_name': b'#!', b'word': b'shebang', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 1, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 1}}, {b'action__pattern': b'^snippet\\s\\+basename$', b'menu_template': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'snip': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'description': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'menu_abbr': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'real_name': b'basename', b'word': b'bname', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 40, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+until$', b'menu_template': b'until ${1:#:condition} ; do  ${0: }  done', b'snip': b'until ${1:#:condition} ; do\n\t\t${0:TARGET}\n\tdone', b'description': b'until ${1:#:condition} ; do\n\t\t${0:TARGET}\n\tdone', b'menu_abbr': b'until ${1:#:condition} ; do  ${0: }  done', b'real_name': b'until', b'word': b'until', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 37, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+filename_upper_camel$', b'menu_template': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'snip': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'description': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'menu_abbr': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'real_name': b'filename_upper_camel', b'word': b'filename_upper_camel', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 45, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+lastmod$', b'menu_template': b'Last modified time', b'snip': b'Last Modified: `strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'description': b'Last Modified: `strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'menu_abbr': b'Last modified time', b'real_name': b'lastmod', b'word': b'lmod', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 22, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+while$', b'menu_template': b'while ${1:#:condition} ; do  ${0: }  done', b'snip': b'while ${1:#:condition} ; do\n\t\t${0:TARGET}\n\tdone', b'description': b'while ${1:#:condition} ; do\n\t\t${0:TARGET}\n\tdone', b'menu_abbr': b'while ${1:#:condition} ; do  ${0: }  done', b'real_name': b'while', b'word': b'while', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 30, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+if$', b'menu_template': b'if [ ${1:#:condition} ]; then  ${0: }  fi', b'snip': b'if [ ${1:#:condition} ]; then\n\t\t${0:TARGET}\n\tfi', b'description': b'if [ ${1:#:condition} ]; then\n\t\t${0:TARGET}\n\tfi', b'menu_abbr': b'if [ ${1:#:condition} ]; then  ${0: }  fi', b'real_name': b'if', b'word': b'if', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 9, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+path$', b'menu_template': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:p') : expand('%:p'), '//\\+', '/', 'g')`${0}", b'snip': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:p') : expand('%:p'), '//\\+', '/', 'g')`${0}", b'description': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:p') : expand('%:p'), '//\\+', '/', 'g')`${0}", b'menu_abbr': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:p') : expand('%:p'), '//\\+', '/', 'g')`${0}", b'real_name': b'path', b'word': b'path', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 32, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+date_english$', b'menu_template': b'`strftime("%d %b %Y")`${0}', b'snip': b'`strftime("%d %b %Y")`${0}', b'description': b'`strftime("%d %b %Y")`${0}', b'menu_abbr': b'`strftime("%d %b %Y")`${0}', b'real_name': b'date_english', b'word': b'date_english', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 3, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+date_iso8601$', b'menu_template': b'`strftime("%Y-%m-%d")`${0}', b'snip': b'`strftime("%Y-%m-%d")`${0}', b'description': b'`strftime("%Y-%m-%d")`${0}', b'menu_abbr': b'`strftime("%Y-%m-%d")`${0}', b'real_name': b'date_iso8601', b'word': b'dd', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 12, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+datetime_iso8601$', b'menu_template': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'snip': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'description': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'menu_abbr': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'real_name': b'datetime_iso8601', b'word': b'df', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 7, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+filename$', b'menu_template': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'snip': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'description': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'menu_abbr': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'real_name': b'filename', b'word': b'fname', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 27, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+warn$', b'menu_template': b'echo "${0: }" 1>&2', b'snip': b'echo "${0:TARGET}" 1>&2', b'description': b'echo "${0:TARGET}" 1>&2', b'menu_abbr': b'echo "${0: }" 1>&2', b'real_name': b'warn', b'word': b'warn', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 89, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 1}}, {b'action__pattern': b'^snippet\\s\\+tmp$', b'menu_template': b'${1:TMPFILE}=$(mktemp ${2:XXX})  trap "rm -f \'${$1}\'" 0 # EXIT  trap "rm -f \'${$1}\'; exit 1" 2 # INT  trap "rm -f \'${$1}\'; exit 1" 1 15 # HUP TERM  ${0}', b'snip': b'${1:TMPFILE}=$(mktemp ${2:XXX})\n\ttrap "rm -f \'${$1}\'" 0               # EXIT\n\ttrap "rm -f \'${$1}\'; exit 1" 2       # INT\n\ttrap "rm -f \'${$1}\'; exit 1" 1 15    # HUP TERM\n\t${0}', b'description': b'${1:TMPFILE}=$(mktemp ${2:XXX})\n\ttrap "rm -f \'${$1}\'" 0               # EXIT\n\ttrap "rm -f \'${$1}\'; exit 1" 2       # INT\n\ttrap "rm -f \'${$1}\'; exit 1" 1 15    # HUP TERM\n\t${0}', b'menu_abbr': b'${1:TMPFILE}=$(mktemp ${2:XXX})  trap "rm -f \'${$1}\'" 0 # EXIT  trap "rm -f \'${$1}\'; exit 1" 2 # INT  trap "rm -f \'${$1}\'; exit 1" 1 15 # HUP TERM  ${0}', b'real_name': b'tmp', b'word': b'tmp', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 53, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+elif$', b'menu_template': b'elif [ ${1:#:condition} ]; then  ${0: }', b'snip': b'elif [ ${1:#:condition} ]; then\n\t\t${0:TARGET}', b'description': b'elif [ ${1:#:condition} ]; then\n\t\t${0:TARGET}', b'menu_abbr': b'elif [ ${1:#:condition} ]; then  ${0: }', b'real_name': b'elif', b'word': b'elif', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 20, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+filename_lower_camel$', b'menu_template': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'snip': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'description': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'menu_abbr': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'real_name': b'filename_lower_camel', b'word': b'fnamelc', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 50, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+while$', b'menu_template': b'while ${1:#:condition} ; do  ${0: }  done', b'snip': b'while ${1:#:condition} ; do\n\t\t${0:TARGET}\n\tdone', b'description': b'while ${1:#:condition} ; do\n\t\t${0:TARGET}\n\tdone', b'menu_abbr': b'while ${1:#:condition} ; do  ${0: }  done', b'real_name': b'while', b'word': b'wh', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 30, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+filename$', b'menu_template': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'snip': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'description': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'menu_abbr': b"`bufname('%') ==#'[Command Line]' ? expand('#') : expand('%')`${0}", b'real_name': b'filename', b'word': b'filename', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 27, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+heredoc$', b'menu_template': b'<< ${1:EOF}  ${0:#: }  $1', b'snip': b'<< ${1:EOF}\n\t\t${0:#:TARGET}\n\t$1', b'description': b'<< ${1:EOF}\n\t\t${0:#:TARGET}\n\t$1', b'menu_abbr': b'<< ${1:EOF}  ${0:#: }  $1', b'real_name': b'heredoc', b'word': b'heredoc', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 43, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+rpath$', b'menu_template': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:h') : expand('%:h'), '\\(//*\\|/*$\\)', '/', 'g')`${0}", b'snip': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:h') : expand('%:h'), '\\(//*\\|/*$\\)', '/', 'g')`${0}", b'description': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:h') : expand('%:h'), '\\(//*\\|/*$\\)', '/', 'g')`${0}", b'menu_abbr': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:h') : expand('%:h'), '\\(//*\\|/*$\\)', '/', 'g')`${0}", b'real_name': b'rpath', b'word': b'rpath', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 36, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+time_colon$', b'menu_template': b'`strftime("%H:%M:%S")`${0}', b'snip': b'`strftime("%H:%M:%S")`${0}', b'description': b'`strftime("%H:%M:%S")`${0}', b'menu_abbr': b'`strftime("%H:%M:%S")`${0}', b'real_name': b'time_colon', b'word': b'dt', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 17, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+lastmod$', b'menu_template': b'Last modified time', b'snip': b'Last Modified: `strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'description': b'Last Modified: `strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'menu_abbr': b'Last modified time', b'real_name': b'lastmod', b'word': b'lastmod', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 22, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+date_iso8601$', b'menu_template': b'`strftime("%Y-%m-%d")`${0}', b'snip': b'`strftime("%Y-%m-%d")`${0}', b'description': b'`strftime("%Y-%m-%d")`${0}', b'menu_abbr': b'`strftime("%Y-%m-%d")`${0}', b'real_name': b'date_iso8601', b'word': b'date_iso8601', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 12, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+abort$', b'menu_template': b'echo "${0: }" 1>&2  exit 1', b'snip': b'echo "${0:TARGET}" 1>&2\n\texit 1', b'description': b'echo "${0:TARGET}" 1>&2\n\texit 1', b'menu_abbr': b'echo "${0: }" 1>&2  exit 1', b'real_name': b'abort', b'word': b'abort', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 93, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 1}}, {b'action__pattern': b'^snippet\\s\\+filename_lower_camel$', b'menu_template': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'snip': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'description': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'menu_abbr': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(_\\(.\\)\\)', '\\u\\1', 'g')`${0}", b'real_name': b'filename_lower_camel', b'word': b'filename_lower_camel', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 50, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+filename_upper_camel$', b'menu_template': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'snip': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'description': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'menu_abbr': b"`substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\\%(^\\(.\\)\\|_\\(.\\)\\)', '\\u\\1\\u\\2', 'g')`${0}", b'real_name': b'filename_upper_camel', b'word': b'fnameuc', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 45, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+#!$', b'menu_template': b'#!/bin/sh', b'snip': b'#!/bin/${1:sh}\n\t${0}', b'description': b'#!/bin/${1:sh}\n\t${0}', b'menu_abbr': b'#!/bin/sh', b'real_name': b'#!', b'word': b'#!', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 1, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 1}}, {b'action__pattern': b'^snippet\\s\\+heredoc$', b'menu_template': b'<< ${1:EOF}  ${0:#: }  $1', b'snip': b'<< ${1:EOF}\n\t\t${0:#:TARGET}\n\t$1', b'description': b'<< ${1:EOF}\n\t\t${0:#:TARGET}\n\t$1', b'menu_abbr': b'<< ${1:EOF}  ${0:#: }  $1', b'real_name': b'heredoc', b'word': b'h', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 43, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+datetime_iso8601$', b'menu_template': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'snip': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'description': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'menu_abbr': b'`strftime("%Y-%m-%dT%H:%M:%S")`${0}', b'real_name': b'datetime_iso8601', b'word': b'datetime_iso8601', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 7, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+for$', b'menu_template': b'for ${1:i} in ${2:#:words}; do  ${0: }  done', b'snip': b'for ${1:i} in ${2:#:words}; do\n\t\t${0:TARGET}\n\tdone', b'description': b'for ${1:i} in ${2:#:words}; do\n\t\t${0:TARGET}\n\tdone', b'menu_abbr': b'for ${1:i} in ${2:#:words}; do  ${0: }  done', b'real_name': b'for', b'word': b'for', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 25, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+case$', b'menu_template': b'case "$${1:{name\\}}" in  ${2:pattern*})  ${0}  ;;  *)  ${3:echo "$$1 Didn\'t match anything"}  esac', b'snip': b'case "$${1:{name\\}}" in\n\t\t${2:pattern*})\n\t\t\t${0}\n\t\t\t;;\n\t\t*)\n\t\t\t${3:echo "$$1 Didn\'t match anything"}\n\tesac', b'description': b'case "$${1:{name\\}}" in\n\t\t${2:pattern*})\n\t\t\t${0}\n\t\t\t;;\n\t\t*)\n\t\t\t${3:echo "$$1 Didn\'t match anything"}\n\tesac', b'menu_abbr': b'case "$${1:{name\\}}" in  ${2:pattern*})  ${0}  ;;  *)  ${3:echo "$$1 Didn\'t match anything"}  esac', b'real_name': b'case', b'word': b'case', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 79, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 1}}, {b'action__pattern': b'^snippet\\s\\+heredoc$', b'menu_template': b'<< ${1:EOF}  ${0:#: }  $1', b'snip': b'<< ${1:EOF}\n\t\t${0:#:TARGET}\n\t$1', b'description': b'<< ${1:EOF}\n\t\t${0:#:TARGET}\n\t$1', b'menu_abbr': b'<< ${1:EOF}  ${0:#: }  $1', b'real_name': b'heredoc', b'word': b'<<', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 43, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+function$', b'menu_template': b'${1:#:name}()  {  ${0: }  }', b'snip': b'${1:#:name}()\n\t{\n\t\t${0:TARGET}\n\t}', b'description': b'${1:#:name}()\n\t{\n\t\t${0:TARGET}\n\t}', b'menu_abbr': b'${1:#:name}()  {  ${0: }  }', b'real_name': b'function', b'word': b'function', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 60, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+time_colon$', b'menu_template': b'`strftime("%H:%M:%S")`${0}', b'snip': b'`strftime("%H:%M:%S")`${0}', b'description': b'`strftime("%H:%M:%S")`${0}', b'menu_abbr': b'`strftime("%H:%M:%S")`${0}', b'real_name': b'time_colon', b'word': b'time_colon', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 17, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+basename$', b'menu_template': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'snip': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'description': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'menu_abbr': b"`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}", b'real_name': b'basename', b'word': b'basename', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/_.snip', b'action__line': 40, b'options': {b'indent': 0, b'oneshot': 0, b'word': 1, b'head': 0}}, {b'action__pattern': b'^snippet\\s\\+match-regexp$', b'menu_template': b'=~', b'snip': b'if [[ $${1:string} =~ ${2:^regexp.*} ]]; then\n\t\t${0}\n\tfi', b'description': b'if [[ $${1:string} =~ ${2:^regexp.*} ]]; then\n\t\t${0}\n\tfi', b'menu_abbr': b'=~', b'real_name': b'match-regexp', b'word': b'match-regexp', b'action__path': b'/Users/AMC/.config/nvim/.cache/init.vim/.dein/neosnippets/sh.snip', b'action__line': 67, b'options': {b'indent': 0, b'oneshot': 0, b'word': 0, b'head': 1}}]
2017-10-26 16:09:17,219 [DEBUG @ session.py:response_cb:149] 76820 - response is available for greenlet <greenlet.greenlet object at 0x1022bbaf8>, switching back
2017-10-26 16:09:17,227 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 4, 'nvim_get_option', ('isfname',)]
2017-10-26 16:09:17,227 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\x04\xafnvim_get_option\x91\xa7isfname''
2017-10-26 16:09:17,227 [DEBUG @ session.py:_yielding_request:153] 76820 - yielding from greenlet <greenlet.greenlet object at 0x1022bbaf8> to wait for response
2017-10-26 16:09:17,227 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,228 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,245 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,245 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [1, 4, None, b'@,48-57,/,.,-,_,+,,,#,$,%,~']
2017-10-26 16:09:17,245 [DEBUG @ async_session.py:_on_response:95] 76820 - received response: None, b'@,48-57,/,.,-,_,+,,,#,$,%,~'
2017-10-26 16:09:17,245 [DEBUG @ session.py:response_cb:149] 76820 - response is available for greenlet <greenlet.greenlet object at 0x1022bbaf8>, switching back
2017-10-26 16:09:17,245 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 5, 'nvim_call_function', ('deoplete#util#vimoption2python_not', ['@,48-57,/,.,-,_,+,,,#,$,%,~'])]
2017-10-26 16:09:17,246 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\x05\xb2nvim_call_function\x92\xda\x00"deoplete#util#vimoption2python_not\x91\xbb@,48-57,/,.,-,_,+,,,#,$,%,~''
2017-10-26 16:09:17,246 [DEBUG @ session.py:_yielding_request:153] 76820 - yielding from greenlet <greenlet.greenlet object at 0x1022bbaf8> to wait for response
2017-10-26 16:09:17,246 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,246 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,247 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,247 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [1, 5, None, b'[^a-zA-Z@0-9/._+,#$%~-]']
2017-10-26 16:09:17,247 [DEBUG @ async_session.py:_on_response:95] 76820 - received response: None, b'[^a-zA-Z@0-9/._+,#$%~-]'
2017-10-26 16:09:17,247 [DEBUG @ session.py:response_cb:149] 76820 - response is available for greenlet <greenlet.greenlet object at 0x1022bbaf8>, switching back
2017-10-26 16:09:17,247 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 6, 'nvim_call_function', ('exists', ['*neoinclude#include#get_tag_files'])]
2017-10-26 16:09:17,268 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\x06\xb2nvim_call_function\x92\xa6exists\x91\xda\x00!*neoinclude#include#get_tag_files''
2017-10-26 16:09:17,268 [DEBUG @ session.py:_yielding_request:153] 76820 - yielding from greenlet <greenlet.greenlet object at 0x1022bbaf8> to wait for response
2017-10-26 16:09:17,268 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,268 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,269 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,269 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [1, 6, None, 0]
2017-10-26 16:09:17,269 [DEBUG @ async_session.py:_on_response:95] 76820 - received response: None, 0
2017-10-26 16:09:17,270 [DEBUG @ session.py:response_cb:149] 76820 - response is available for greenlet <greenlet.greenlet object at 0x1022bbaf8>, switching back
2017-10-26 16:09:17,270 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 7, 'nvim_call_function', ('tagfiles', [])]
2017-10-26 16:09:17,270 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\x07\xb2nvim_call_function\x92\xa8tagfiles\x90''
2017-10-26 16:09:17,270 [DEBUG @ session.py:_yielding_request:153] 76820 - yielding from greenlet <greenlet.greenlet object at 0x1022bbaf8> to wait for response
2017-10-26 16:09:17,270 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,270 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,273 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,274 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [1, 7, None, []]
2017-10-26 16:09:17,274 [DEBUG @ async_session.py:_on_response:95] 76820 - received response: None, []
2017-10-26 16:09:17,275 [DEBUG @ session.py:response_cb:149] 76820 - response is available for greenlet <greenlet.greenlet object at 0x1022bbaf8>, switching back
2017-10-26 16:09:17,275 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 8, 'nvim_call_function', ('map', [[], 'fnamemodify(v:val, ":p")'])]
2017-10-26 16:09:17,275 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\x08\xb2nvim_call_function\x92\xa3map\x92\x90\xb8fnamemodify(v:val, ":p")''
2017-10-26 16:09:17,275 [DEBUG @ session.py:_yielding_request:153] 76820 - yielding from greenlet <greenlet.greenlet object at 0x1022bbaf8> to wait for response
2017-10-26 16:09:17,275 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,275 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,276 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,276 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [1, 8, None, []]
2017-10-26 16:09:17,276 [DEBUG @ async_session.py:_on_response:95] 76820 - received response: None, []
2017-10-26 16:09:17,276 [DEBUG @ session.py:response_cb:149] 76820 - response is available for greenlet <greenlet.greenlet object at 0x1022bbaf8>, switching back
2017-10-26 16:09:17,276 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 9, 'nvim_eval', ('&l:filetype',)]
2017-10-26 16:09:17,276 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\t\xa9nvim_eval\x91\xab&l:filetype''
2017-10-26 16:09:17,276 [DEBUG @ session.py:_yielding_request:153] 76820 - yielding from greenlet <greenlet.greenlet object at 0x1022bbaf8> to wait for response
2017-10-26 16:09:17,276 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,277 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,277 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,277 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [1, 9, None, b'sh']
2017-10-26 16:09:17,277 [DEBUG @ async_session.py:_on_response:95] 76820 - received response: None, b'sh'
2017-10-26 16:09:17,277 [DEBUG @ session.py:response_cb:149] 76820 - response is available for greenlet <greenlet.greenlet object at 0x1022bbaf8>, switching back
2017-10-26 16:09:17,277 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 10, 'nvim_get_current_buf', ()]
2017-10-26 16:09:17,277 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\n\xb4nvim_get_current_buf\x90''
2017-10-26 16:09:17,277 [DEBUG @ session.py:_yielding_request:153] 76820 - yielding from greenlet <greenlet.greenlet object at 0x1022bbaf8> to wait for response
2017-10-26 16:09:17,277 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,278 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,278 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,278 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [1, 10, None, ExtType(code=0, data=b'\x01')]
2017-10-26 16:09:17,278 [DEBUG @ async_session.py:_on_response:95] 76820 - received response: None, ExtType(code=0, data=b'\x01')
2017-10-26 16:09:17,278 [DEBUG @ session.py:response_cb:149] 76820 - response is available for greenlet <greenlet.greenlet object at 0x1022bbaf8>, switching back
2017-10-26 16:09:17,278 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 11, 'nvim_buf_line_count', (ExtType(code=0, data=b'\x01'),)]
2017-10-26 16:09:17,278 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\x0b\xb3nvim_buf_line_count\x91\xd4\x00\x01''
2017-10-26 16:09:17,279 [DEBUG @ session.py:_yielding_request:153] 76820 - yielding from greenlet <greenlet.greenlet object at 0x1022bbaf8> to wait for response
2017-10-26 16:09:17,279 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,279 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,279 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,279 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [1, 11, None, 356]
2017-10-26 16:09:17,279 [DEBUG @ async_session.py:_on_response:95] 76820 - received response: None, 356
2017-10-26 16:09:17,279 [DEBUG @ session.py:response_cb:149] 76820 - response is available for greenlet <greenlet.greenlet object at 0x1022bbaf8>, switching back
2017-10-26 16:09:17,279 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 12, 'nvim_call_function', ('getline', [1, 356])]
2017-10-26 16:09:17,280 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\x0c\xb2nvim_call_function\x92\xa7getline\x92\x01\xcd\x01d''
2017-10-26 16:09:17,280 [DEBUG @ session.py:_yielding_request:153] 76820 - yielding from greenlet <greenlet.greenlet object at 0x1022bbaf8> to wait for response
2017-10-26 16:09:17,280 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,280 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,280 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,280 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,281 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,281 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [1, 12, None, [b'#!/bin/sh', b'', b'source ~/.profile', b'', b'# Exports', b'# This is for android crap', b"export GOOGLE_APPLICATION_CREDENTIALS='./.AMCORVI-9b571a22b538.json'", b"export PS1='hack:/$(pwd) \\n\\n=> '", b"export USER='Star'", b'export PATH=${PATH}:~/Library/Android/sdk/platform-tools:~/Library/Android/sdk/tools', b'export JAVA_HOME=$(/usr/libexec/java_home)', b'export PATH=${JAVA_HOME}/bin:$PATH', b'export PATH=/usr/local/bin:$PATH', b'', b'# MacPorts Installer addition on 2017-05-09_at_05:19:45: adding an appropriate PATH variable for use with MacPorts.', b'export PATH="/opt/local/bin:/opt/local/sbin:$PATH"', b'', b'# Setting PATH for Python 3.5', b'# The original version is saved in .bash_profile.pysave', b'PATH="/Library/Frameworks/Python.framework/Versions/3.5/bin:${PATH}"', b'export PATH', b'', b'export PATH="$PATH:/usr/local/go/bin:$HOME/go/bin"', b'export PATH=$PATH:/usr/local/sbin', b'export PATH=$PATH:$GOPATH/bin', b'export PATH=$PATH:/usr/local/mysql/bin', b'export _Z_DATA="$HOME/z-data"', b"export GOOGLE_APPLICATION_CREDENTIALS='./.AMCORVI-9b571a22b538.json'", b"export PS1='hack:/$(pwd) \\n\\n=> '", b"export USER='Star'", b'', b'# Aliases', b'# incase i forget how to clear', b"alias c='clear'", b"alias cls='clear'", b'alias dl=download', b"alias k='clear'", b'alias x=extract', b'', b'# Usefull stuff for presentation and seeing dotfiles', b"alias hideall='defaults write com.apple.finder AppleShowAllFiles NO && killall Finder'", b'alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"', b"alias showall='defaults write com.apple.finder AppleShowAllFiles YES && killall Finder'", b'alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"', b'', b'# Get rid of those pesky .DS_Store files recursively', b"alias dsclean='find . -type f -name .DS_Store -print0 | xargs -0 rm'", b'', b'# Flush your dns cache', b"alias flush='dscacheutil -flushcache'", b'', b"alias arc.bash='nvim ~/.bash_profile'", b"alias arc.bashrc='cd ~/.dotfiles/ && nvim bashrc'", b"alias arc.boxes='cd ~code/sandbox/vagrant\\ boxes'", b"alias arc.code='cd ~/code/'", b"alias arc.course='cd ~/code/Courses'", b"alias arc.desk='cd ~/Desktop'", b"alias arc.didact='cd ~/code/Didact'", b"alias arc.down='cd ~/Download'", b"alias arc.muxrc='dotfiles && nvim ./tmux.conf'", b"alias arc.nsplash='arc.pic && cd unsplash'", b"alias arc.pic='cd ~/Pictures'", b"alias arc.portf='arc.code && cd portfolio/'", b"alias arc.portfp='arc.code && cd portfolio/\\#practice'", b"alias arc.sobp='source ~/.bash_profile'", b"alias arc.vimrc='v ~/.vim/init.vim'", b'alias bbcnews="termsaver rssfeed --url=http://newsrss.bbc.co.uk/rss/newsonline_world_edition/americas/rss.xml"', b'alias code=\'open -a "Code" \'', b"alias corvi.code='cd ~/Desktop/.Corvi-APPS'", b"alias corvi.doc='cd ~/Desktop/.Corvi\\ Docs'", b"alias dlv='youtube-dl'", b"alias dotfiles='cd ~/.dotfiles'", b"alias frammed='alias'", b"alias hacknode='termsaver programmer --path ~/node_modules/ --delay 0.040'", b"alias la='ls -a'", b"alias ll='ls -l'", b"alias ls='ls -G'", b"alias lsa='ls -alt'", b"alias news='newsbeuter'", b"alias nodeenv='NODE_ENV='", b'alias nprart="termsaver rssfeed --url=http://www.npr.org/rss/rss.php?id=1008"', b'alias nytimes="termsaver rssfeed --url=http://feeds.nytimes.com/nyt/rss/HomePage"', b"alias py3='python3'", b"alias redcheck='ls'", b'alias reutersnews="termsaver rssfeed --url=http://feeds.reuters.com/reuters/topNews"', b'alias sei="set -o emacs"', b"alias shiva.enters='cat ~/.shiva_net_title'", b'alias svi="set -o vi"', b"alias vimruntime='cd ~/.vim_runtime/'", b'alias wirednews="termsaver rssfeed --url=http://feeds.wired.com/wired/index"', b"alias worklog='nvim ~/.worklog'", b"alias worklogs='termsaver programmer -p ~/.worklog -d .04'", b"alias runvice='termsaver rssfeed --url=https://www.vice.com/en_us/rss'", b'', b'# Useful blah blah blah', b'[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*', b'', b'# test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"', b'', b'##', b'# Your previous /Users/AMC/.bash_profile file was backed up as /Users/AMC/.bash_profile.macports-saved_2017-05-09_at_05:19:45', b'##', b'', b'# Finished adapting your PATH environment variable for use with MacPorts.', b'', b'', b'# The next line updates PATH for the Google Cloud SDK.', b"if [ -f '/Users/AMC/Desktop/google-cloud-sdk/path.bash.inc' ]; then source '/Users/AMC/Desktop/google-cloud-sdk/path.bash.inc'; fi", b'', b'# The next line enables shell command completion for gcloud.', b"if [ -f '/Users/AMC/Desktop/google-cloud-sdk/completion.bash.inc' ]; then source '/Users/AMC/Desktop/google-cloud-sdk/completion.bash.inc'; fi", b'', b'source ~/.z/z.sh', b'', b'RED="\\[\\033[0;31m\\]"', b'YELLOW="\\[\\033[0;33m\\]"', b'GREEN="\\[\\033[0;32m\\]"', b'NO_COLOUR="\\[\\033[0m\\]"', b'', b'function _git_prompt {', b'local git_status="`git status -unormal 2>&1`"', b"# Checks to see if we're in a git repo", b'if ! [[ "$git_status" =~ Not\\ a\\ git\\ repo ]]; then', b"  # if we're in a repo thats clean, then color it green", b'  if [[ "$git_status" =~ nothing\\ to\\ commit ]]; then', b'    local ansi=$GREEN', b'    # if the repos dirty, color it red', b'  elif [[ "$git_status" =~ nothing\\ added\\ to\\ commit\\ but\\ untracked\\ files\\ present ]]; then', b'    local ansi=$RED', b'  else', b'    #Just to be sure, color it red', b'    local ansi=$RED', b'  fi', b'', b'  # Get git branch name', b'  # checks the output of git status for "On branch " then uses that to set the branch', b'  if [[ "$git_status" =~ On\\ branch\\ ([^[:space:]]+) ]]; then', b'    branch=${BASH_REMATCH[1]}', b'    #test "$branch" != master || branch=\' \'', b'  else', b'    # Detached HEAD.  (branch=HEAD is a faster alternative.)', b'    branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null ||', b'      echo HEAD`)"', b'  fi', b'  # prints out " | $branch_name"', b'  echo -n \'| \\[\'"$ansi"\'\\]\'"$branch"\'\\[\\e[0m\\] [$(_git_changes)]\'', b'fi', b'}', b'export PROMPT_COMMAND=\'export PS1="${_PS1} $(_git_prompt)\\n$ "\'', b'export _PS1="$YELLOW\\u$NO_COLOUR:\\w$(_git_prompt)"', b'', b'function _git_changes {', b'[[ $(git rev-parse --is-inside-work-tree 2>/dev/null) == true ]] || return 1', b'', b'local added_symbol="\xe2\x97\x8f"', b'local unmerged_symbol="\xe2\x9c\x97"', b'local modified_symbol="+"', b'local clean_symbol="\xe2\x9c\x94"', b'local has_untracked_files_symbol="\xe2\x80\xa6"', b'', b'local ahead_symbol="\xe2\x86\x91"', b'local behind_symbol="\xe2\x86\x93"', b'', b'local unmerged_count=0 modified_count=0 has_untracked_files=0 added_count=0 is_clean=""', b'', b'set -- $(git rev-list --left-right --count @{upstream}...HEAD 2>/dev/null)', b'local behind_count=$1', b'local ahead_count=$2', b'', b'# Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), changed (T), Unmerged (U), Unknown (X), Broken (B)', b'while read line; do', b'  case "$line" in', b'    M*) modified_count=$(( $modified_count + 1 )) ;;', b'    U*) unmerged_count=$(( $unmerged_count + 1 )) ;;', b'  esac', b'done < <(git diff --name-status)', b'', b'while read line; do', b'  case "$line" in', b'    *) added_count=$(( $added_count + 1 )) ;;', b'  esac', b'done < <(git diff --name-status --cached)', b'', b'if [ -n "$(git ls-files --others --exclude-standard)" ]; then', b'  has_untracked_files=1', b'fi', b'', b'if [ $(( unmerged_count + modified_count + has_untracked_files + added_count )) -eq 0 ]; then', b'  is_clean=1', b'fi', b'', b'local leading_whitespace=""', b'[[ $ahead_count -gt 0 ]]         && { printf "%s" "$leading_whitespace$ahead_symbol$ahead_count"; leading_whitespace=" "; }', b'[[ $behind_count -gt 0 ]]        && { printf "%s" "$leading_whitespace$behind_symbol$behind_count"; leading_whitespace=" "; }', b'[[ $modified_count -gt 0 ]]      && { printf "%s" "$leading_whitespace$modified_symbol$modified_count"; leading_whitespace=" "; }', b'[[ $unmerged_count -gt 0 ]]      && { printf "%s" "$leading_whitespace$unmerged_symbol$unmerged_count"; leading_whitespace=" "; }', b'[[ $added_count -gt 0 ]]         && { printf "%s" "$leading_whitespace$added_symbol$added_count"; leading_whitespace=" "; }', b'[[ $has_untracked_files -gt 0 ]] && { printf "%s" "$leading_whitespace$has_untracked_files_symbol"; leading_whitespace=" "; }', b'[[ $is_clean -gt 0 ]]            && { printf "%s" "$leading_whitespace$clean_symbol"; leading_whitespace=" "; }', b'}', b'', b'# Because Typing python -m SimpleHTTPServer is too Damn Long', b'# Start an HTTP server from a directory, optionally specifying the port', b'function server() {', b'local port="${1:-8000}"', b'#    open "http://localhost:${port}/"', b'open -a google\\ chrome\\ canary "http://localhost:${port}/" --args --disable-web-security', b'# Set the default Content-Type to `text/plain` instead of `application/octet-stream`', b'# And serve everything as UTF-8 (although not technically correct, this doesn\xe2\x80\x99t break anything for binary files)', b'python -c $\'import SimpleHTTPServer;\\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\\nmap[""] = "text/plain";\\nfor key, value in map.items():\\n\\tmap[key] = value + ";charset=UTF-8";\\nSimpleHTTPServer.test();\' "$port"', b'  }', b'', b'', b'  function download(){', b'  curl -O "$1"', b'}', b'', b'# archive file or folder', b'function compress() {', b'dirPriorToExe=`pwd`', b'dirName=`dirname $1`', b'baseName=`basename $1`', b'', b'if [ -f $1 ] ; then', b'  echo "It was a file change directory to $dirName"', b'  cd $dirName', b'  case $2 in', b'    tar.bz2)', b'      tar cjf $baseName.tar.bz2 $baseName', b'      ;;', b'    tar.gz)', b'      tar czf $baseName.tar.gz $baseName', b'      ;;', b'    gz)', b'      gzip $baseName', b'      ;;', b'    tar)', b'      tar -cvvf $baseName.tar $baseName', b'      ;;', b'    zip)', b'      zip -r $baseName.zip $baseName', b'      ;;', b'    *)', b'      echo "Method not passed compressing using tar.bz2"', b'      tar cjf $baseName.tar.bz2 $baseName', b'      ;;', b'  esac', b'  echo "Back to Directory $dirPriorToExe"', b'  cd $dirPriorToExe', b'else', b'  if [ -d $1 ] ; then', b'    echo "It was a Directory change directory to $dirName"', b'    cd $dirName', b'    case $2 in', b'      tar.bz2)', b'        tar cjf $baseName.tar.bz2 $baseName', b'        ;;', b'      tar.gz)', b'        tar czf $baseName.tar.gz $baseName', b'        ;;', b'      gz)', b'        gzip -r $baseName', b'        ;;', b'      tar)', b'        tar -cvvf $baseName.tar $baseName', b'        ;;', b'      zip)', b'        zip -r $baseName.zip $baseName', b'        ;;', b'      *)', b'        echo "Method not passed compressing using tar.bz2"', b'        tar cjf $baseName.tar.bz2 $baseName', b'        ;;', b'    esac', b'    echo "Back to Directory $dirPriorToExe"', b'    cd $dirPriorToExe', b'  else', b'    echo "\'$1\' is not a valid file/folder"', b'  fi', b'fi', b'echo "Done"', b'echo "###########################################"', b'}', b'', b'# Extract archives - use: extract <file>', b'# Based on http://dotfiles.org/~pseup/.bashrc', b'function extract() {', b'local remove_archive', b'local success', b'local file_name', b'local extract_dir', b'', b'if (( $# == 0 )); then', b'  echo "Usage: extract [-option] [file ...]"', b'  echo', b'  echo Options:', b'  echo "    -r, --remove    Remove archive."', b'fi', b'', b'remove_archive=1', b'if [[ "$1" == "-r" ]] || [[ "$1" == "--remove" ]]; then', b'  remove_archive=0', b'  shift', b'fi', b'', b'while (( $# > 0 )); do', b'  if [[ ! -f "$1" ]]; then', b'    echo "extract: \'$1\' is not a valid file" 1>&2', b'    shift', b'    continue', b'  fi', b'', b'  success=0', b'  file_name="$( basename "$1" )"', b'  extract_dir="$( echo "$file_name" | sed "s/\\.${1##*.}//g" )"', b'  case "$1" in', b'    (*.tar.gz|*.tgz) [ -z $commands[pigz] ] && tar zxvf "$1" || pigz -dc "$1" | tar xv ;;', b'    (*.tar.bz2|*.tbz|*.tbz2) tar xvjf "$1" ;;', b'    (*.tar.xz|*.txz) tar --xz --help &> /dev/null \\', b'      && tar --xz -xvf "$1" \\', b'      || xzcat "$1" | tar xvf - ;;', b'  (*.tar.zma|*.tlz) tar --lzma --help &> /dev/null \\', b'    && tar --lzma -xvf "$1" \\', b'    || lzcat "$1" | tar xvf - ;;', b'(*.tar) tar xvf "$1" ;;', b'(*.gz) [ -z $commands[pigz] ] && gunzip "$1" || pigz -d "$1" ;;', b'(*.bz2) bunzip2 "$1" ;;', b'(*.xz) unxz "$1" ;;', b'(*.lzma) unlzma "$1" ;;', b'(*.Z) uncompress "$1" ;;', b'(*.zip|*.war|*.jar|*.sublime-package) unzip "$1" -d $extract_dir ;;', b'(*.rar) unrar x -ad "$1" ;;', b'(*.7z) 7za x "$1" ;;', b'(*.deb)', b'  mkdir -p "$extract_dir/control"', b'  mkdir -p "$extract_dir/data"', b'  cd "$extract_dir"; ar vx "../${1}" > /dev/null', b'  cd control; tar xzvf ../control.tar.gz', b'  cd ../data; tar xzvf ../data.tar.gz', b'  cd ..; rm *.tar.gz debian-binary', b'  cd ..', b'  ;;', b'(*)', b'  echo "extract: \'$1\' cannot be extracted" 1>&2', b'  success=1', b'  ;;', b'    esac', b'', b'    (( success = $success > 0 ? $success : $? ))', b'    (( $success == 0 )) && (( $remove_archive == 0 )) && rm "$1"', b'    shift', b'  done', b'}', b'', b'# [ -f ~/.fzf.bash ] && source ~/.fzf.bash', b'']]
2017-10-26 16:09:17,282 [DEBUG @ async_session.py:_on_response:95] 76820 - received response: None, [b'#!/bin/sh', b'', b'source ~/.profile', b'', b'# Exports', b'# This is for android crap', b"export GOOGLE_APPLICATION_CREDENTIALS='./.AMCORVI-9b571a22b538.json'", b"export PS1='hack:/$(pwd) \\n\\n=> '", b"export USER='Star'", b'export PATH=${PATH}:~/Library/Android/sdk/platform-tools:~/Library/Android/sdk/tools', b'export JAVA_HOME=$(/usr/libexec/java_home)', b'export PATH=${JAVA_HOME}/bin:$PATH', b'export PATH=/usr/local/bin:$PATH', b'', b'# MacPorts Installer addition on 2017-05-09_at_05:19:45: adding an appropriate PATH variable for use with MacPorts.', b'export PATH="/opt/local/bin:/opt/local/sbin:$PATH"', b'', b'# Setting PATH for Python 3.5', b'# The original version is saved in .bash_profile.pysave', b'PATH="/Library/Frameworks/Python.framework/Versions/3.5/bin:${PATH}"', b'export PATH', b'', b'export PATH="$PATH:/usr/local/go/bin:$HOME/go/bin"', b'export PATH=$PATH:/usr/local/sbin', b'export PATH=$PATH:$GOPATH/bin', b'export PATH=$PATH:/usr/local/mysql/bin', b'export _Z_DATA="$HOME/z-data"', b"export GOOGLE_APPLICATION_CREDENTIALS='./.AMCORVI-9b571a22b538.json'", b"export PS1='hack:/$(pwd) \\n\\n=> '", b"export USER='Star'", b'', b'# Aliases', b'# incase i forget how to clear', b"alias c='clear'", b"alias cls='clear'", b'alias dl=download', b"alias k='clear'", b'alias x=extract', b'', b'# Usefull stuff for presentation and seeing dotfiles', b"alias hideall='defaults write com.apple.finder AppleShowAllFiles NO && killall Finder'", b'alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"', b"alias showall='defaults write com.apple.finder AppleShowAllFiles YES && killall Finder'", b'alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"', b'', b'# Get rid of those pesky .DS_Store files recursively', b"alias dsclean='find . -type f -name .DS_Store -print0 | xargs -0 rm'", b'', b'# Flush your dns cache', b"alias flush='dscacheutil -flushcache'", b'', b"alias arc.bash='nvim ~/.bash_profile'", b"alias arc.bashrc='cd ~/.dotfiles/ && nvim bashrc'", b"alias arc.boxes='cd ~code/sandbox/vagrant\\ boxes'", b"alias arc.code='cd ~/code/'", b"alias arc.course='cd ~/code/Courses'", b"alias arc.desk='cd ~/Desktop'", b"alias arc.didact='cd ~/code/Didact'", b"alias arc.down='cd ~/Download'", b"alias arc.muxrc='dotfiles && nvim ./tmux.conf'", b"alias arc.nsplash='arc.pic && cd unsplash'", b"alias arc.pic='cd ~/Pictures'", b"alias arc.portf='arc.code && cd portfolio/'", b"alias arc.portfp='arc.code && cd portfolio/\\#practice'", b"alias arc.sobp='source ~/.bash_profile'", b"alias arc.vimrc='v ~/.vim/init.vim'", b'alias bbcnews="termsaver rssfeed --url=http://newsrss.bbc.co.uk/rss/newsonline_world_edition/americas/rss.xml"', b'alias code=\'open -a "Code" \'', b"alias corvi.code='cd ~/Desktop/.Corvi-APPS'", b"alias corvi.doc='cd ~/Desktop/.Corvi\\ Docs'", b"alias dlv='youtube-dl'", b"alias dotfiles='cd ~/.dotfiles'", b"alias frammed='alias'", b"alias hacknode='termsaver programmer --path ~/node_modules/ --delay 0.040'", b"alias la='ls -a'", b"alias ll='ls -l'", b"alias ls='ls -G'", b"alias lsa='ls -alt'", b"alias news='newsbeuter'", b"alias nodeenv='NODE_ENV='", b'alias nprart="termsaver rssfeed --url=http://www.npr.org/rss/rss.php?id=1008"', b'alias nytimes="termsaver rssfeed --url=http://feeds.nytimes.com/nyt/rss/HomePage"', b"alias py3='python3'", b"alias redcheck='ls'", b'alias reutersnews="termsaver rssfeed --url=http://feeds.reuters.com/reuters/topNews"', b'alias sei="set -o emacs"', b"alias shiva.enters='cat ~/.shiva_net_title'", b'alias svi="set -o vi"', b"alias vimruntime='cd ~/.vim_runtime/'", b'alias wirednews="termsaver rssfeed --url=http://feeds.wired.com/wired/index"', b"alias worklog='nvim ~/.worklog'", b"alias worklogs='termsaver programmer -p ~/.worklog -d .04'", b"alias runvice='termsaver rssfeed --url=https://www.vice.com/en_us/rss'", b'', b'# Useful blah blah blah', b'[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*', b'', b'# test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"', b'', b'##', b'# Your previous /Users/AMC/.bash_profile file was backed up as /Users/AMC/.bash_profile.macports-saved_2017-05-09_at_05:19:45', b'##', b'', b'# Finished adapting your PATH environment variable for use with MacPorts.', b'', b'', b'# The next line updates PATH for the Google Cloud SDK.', b"if [ -f '/Users/AMC/Desktop/google-cloud-sdk/path.bash.inc' ]; then source '/Users/AMC/Desktop/google-cloud-sdk/path.bash.inc'; fi", b'', b'# The next line enables shell command completion for gcloud.', b"if [ -f '/Users/AMC/Desktop/google-cloud-sdk/completion.bash.inc' ]; then source '/Users/AMC/Desktop/google-cloud-sdk/completion.bash.inc'; fi", b'', b'source ~/.z/z.sh', b'', b'RED="\\[\\033[0;31m\\]"', b'YELLOW="\\[\\033[0;33m\\]"', b'GREEN="\\[\\033[0;32m\\]"', b'NO_COLOUR="\\[\\033[0m\\]"', b'', b'function _git_prompt {', b'local git_status="`git status -unormal 2>&1`"', b"# Checks to see if we're in a git repo", b'if ! [[ "$git_status" =~ Not\\ a\\ git\\ repo ]]; then', b"  # if we're in a repo thats clean, then color it green", b'  if [[ "$git_status" =~ nothing\\ to\\ commit ]]; then', b'    local ansi=$GREEN', b'    # if the repos dirty, color it red', b'  elif [[ "$git_status" =~ nothing\\ added\\ to\\ commit\\ but\\ untracked\\ files\\ present ]]; then', b'    local ansi=$RED', b'  else', b'    #Just to be sure, color it red', b'    local ansi=$RED', b'  fi', b'', b'  # Get git branch name', b'  # checks the output of git status for "On branch " then uses that to set the branch', b'  if [[ "$git_status" =~ On\\ branch\\ ([^[:space:]]+) ]]; then', b'    branch=${BASH_REMATCH[1]}', b'    #test "$branch" != master || branch=\' \'', b'  else', b'    # Detached HEAD.  (branch=HEAD is a faster alternative.)', b'    branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null ||', b'      echo HEAD`)"', b'  fi', b'  # prints out " | $branch_name"', b'  echo -n \'| \\[\'"$ansi"\'\\]\'"$branch"\'\\[\\e[0m\\] [$(_git_changes)]\'', b'fi', b'}', b'export PROMPT_COMMAND=\'export PS1="${_PS1} $(_git_prompt)\\n$ "\'', b'export _PS1="$YELLOW\\u$NO_COLOUR:\\w$(_git_prompt)"', b'', b'function _git_changes {', b'[[ $(git rev-parse --is-inside-work-tree 2>/dev/null) == true ]] || return 1', b'', b'local added_symbol="\xe2\x97\x8f"', b'local unmerged_symbol="\xe2\x9c\x97"', b'local modified_symbol="+"', b'local clean_symbol="\xe2\x9c\x94"', b'local has_untracked_files_symbol="\xe2\x80\xa6"', b'', b'local ahead_symbol="\xe2\x86\x91"', b'local behind_symbol="\xe2\x86\x93"', b'', b'local unmerged_count=0 modified_count=0 has_untracked_files=0 added_count=0 is_clean=""', b'', b'set -- $(git rev-list --left-right --count @{upstream}...HEAD 2>/dev/null)', b'local behind_count=$1', b'local ahead_count=$2', b'', b'# Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), changed (T), Unmerged (U), Unknown (X), Broken (B)', b'while read line; do', b'  case "$line" in', b'    M*) modified_count=$(( $modified_count + 1 )) ;;', b'    U*) unmerged_count=$(( $unmerged_count + 1 )) ;;', b'  esac', b'done < <(git diff --name-status)', b'', b'while read line; do', b'  case "$line" in', b'    *) added_count=$(( $added_count + 1 )) ;;', b'  esac', b'done < <(git diff --name-status --cached)', b'', b'if [ -n "$(git ls-files --others --exclude-standard)" ]; then', b'  has_untracked_files=1', b'fi', b'', b'if [ $(( unmerged_count + modified_count + has_untracked_files + added_count )) -eq 0 ]; then', b'  is_clean=1', b'fi', b'', b'local leading_whitespace=""', b'[[ $ahead_count -gt 0 ]]         && { printf "%s" "$leading_whitespace$ahead_symbol$ahead_count"; leading_whitespace=" "; }', b'[[ $behind_count -gt 0 ]]        && { printf "%s" "$leading_whitespace$behind_symbol$behind_count"; leading_whitespace=" "; }', b'[[ $modified_count -gt 0 ]]      && { printf "%s" "$leading_whitespace$modified_symbol$modified_count"; leading_whitespace=" "; }', b'[[ $unmerged_count -gt 0 ]]      && { printf "%s" "$leading_whitespace$unmerged_symbol$unmerged_count"; leading_whitespace=" "; }', b'[[ $added_count -gt 0 ]]         && { printf "%s" "$leading_whitespace$added_symbol$added_count"; leading_whitespace=" "; }', b'[[ $has_untracked_files -gt 0 ]] && { printf "%s" "$leading_whitespace$has_untracked_files_symbol"; leading_whitespace=" "; }', b'[[ $is_clean -gt 0 ]]            && { printf "%s" "$leading_whitespace$clean_symbol"; leading_whitespace=" "; }', b'}', b'', b'# Because Typing python -m SimpleHTTPServer is too Damn Long', b'# Start an HTTP server from a directory, optionally specifying the port', b'function server() {', b'local port="${1:-8000}"', b'#    open "http://localhost:${port}/"', b'open -a google\\ chrome\\ canary "http://localhost:${port}/" --args --disable-web-security', b'# Set the default Content-Type to `text/plain` instead of `application/octet-stream`', b'# And serve everything as UTF-8 (although not technically correct, this doesn\xe2\x80\x99t break anything for binary files)', b'python -c $\'import SimpleHTTPServer;\\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\\nmap[""] = "text/plain";\\nfor key, value in map.items():\\n\\tmap[key] = value + ";charset=UTF-8";\\nSimpleHTTPServer.test();\' "$port"', b'  }', b'', b'', b'  function download(){', b'  curl -O "$1"', b'}', b'', b'# archive file or folder', b'function compress() {', b'dirPriorToExe=`pwd`', b'dirName=`dirname $1`', b'baseName=`basename $1`', b'', b'if [ -f $1 ] ; then', b'  echo "It was a file change directory to $dirName"', b'  cd $dirName', b'  case $2 in', b'    tar.bz2)', b'      tar cjf $baseName.tar.bz2 $baseName', b'      ;;', b'    tar.gz)', b'      tar czf $baseName.tar.gz $baseName', b'      ;;', b'    gz)', b'      gzip $baseName', b'      ;;', b'    tar)', b'      tar -cvvf $baseName.tar $baseName', b'      ;;', b'    zip)', b'      zip -r $baseName.zip $baseName', b'      ;;', b'    *)', b'      echo "Method not passed compressing using tar.bz2"', b'      tar cjf $baseName.tar.bz2 $baseName', b'      ;;', b'  esac', b'  echo "Back to Directory $dirPriorToExe"', b'  cd $dirPriorToExe', b'else', b'  if [ -d $1 ] ; then', b'    echo "It was a Directory change directory to $dirName"', b'    cd $dirName', b'    case $2 in', b'      tar.bz2)', b'        tar cjf $baseName.tar.bz2 $baseName', b'        ;;', b'      tar.gz)', b'        tar czf $baseName.tar.gz $baseName', b'        ;;', b'      gz)', b'        gzip -r $baseName', b'        ;;', b'      tar)', b'        tar -cvvf $baseName.tar $baseName', b'        ;;', b'      zip)', b'        zip -r $baseName.zip $baseName', b'        ;;', b'      *)', b'        echo "Method not passed compressing using tar.bz2"', b'        tar cjf $baseName.tar.bz2 $baseName', b'        ;;', b'    esac', b'    echo "Back to Directory $dirPriorToExe"', b'    cd $dirPriorToExe', b'  else', b'    echo "\'$1\' is not a valid file/folder"', b'  fi', b'fi', b'echo "Done"', b'echo "###########################################"', b'}', b'', b'# Extract archives - use: extract <file>', b'# Based on http://dotfiles.org/~pseup/.bashrc', b'function extract() {', b'local remove_archive', b'local success', b'local file_name', b'local extract_dir', b'', b'if (( $# == 0 )); then', b'  echo "Usage: extract [-option] [file ...]"', b'  echo', b'  echo Options:', b'  echo "    -r, --remove    Remove archive."', b'fi', b'', b'remove_archive=1', b'if [[ "$1" == "-r" ]] || [[ "$1" == "--remove" ]]; then', b'  remove_archive=0', b'  shift', b'fi', b'', b'while (( $# > 0 )); do', b'  if [[ ! -f "$1" ]]; then', b'    echo "extract: \'$1\' is not a valid file" 1>&2', b'    shift', b'    continue', b'  fi', b'', b'  success=0', b'  file_name="$( basename "$1" )"', b'  extract_dir="$( echo "$file_name" | sed "s/\\.${1##*.}//g" )"', b'  case "$1" in', b'    (*.tar.gz|*.tgz) [ -z $commands[pigz] ] && tar zxvf "$1" || pigz -dc "$1" | tar xv ;;', b'    (*.tar.bz2|*.tbz|*.tbz2) tar xvjf "$1" ;;', b'    (*.tar.xz|*.txz) tar --xz --help &> /dev/null \\', b'      && tar --xz -xvf "$1" \\', b'      || xzcat "$1" | tar xvf - ;;', b'  (*.tar.zma|*.tlz) tar --lzma --help &> /dev/null \\', b'    && tar --lzma -xvf "$1" \\', b'    || lzcat "$1" | tar xvf - ;;', b'(*.tar) tar xvf "$1" ;;', b'(*.gz) [ -z $commands[pigz] ] && gunzip "$1" || pigz -d "$1" ;;', b'(*.bz2) bunzip2 "$1" ;;', b'(*.xz) unxz "$1" ;;', b'(*.lzma) unlzma "$1" ;;', b'(*.Z) uncompress "$1" ;;', b'(*.zip|*.war|*.jar|*.sublime-package) unzip "$1" -d $extract_dir ;;', b'(*.rar) unrar x -ad "$1" ;;', b'(*.7z) 7za x "$1" ;;', b'(*.deb)', b'  mkdir -p "$extract_dir/control"', b'  mkdir -p "$extract_dir/data"', b'  cd "$extract_dir"; ar vx "../${1}" > /dev/null', b'  cd control; tar xzvf ../control.tar.gz', b'  cd ../data; tar xzvf ../data.tar.gz', b'  cd ..; rm *.tar.gz debian-binary', b'  cd ..', b'  ;;', b'(*)', b'  echo "extract: \'$1\' cannot be extracted" 1>&2', b'  success=1', b'  ;;', b'    esac', b'', b'    (( success = $success > 0 ? $success : $? ))', b'    (( $success == 0 )) && (( $remove_archive == 0 )) && rm "$1"', b'    shift', b'  done', b'}', b'', b'# [ -f ~/.fzf.bash ] && source ~/.fzf.bash', b'']
2017-10-26 16:09:17,283 [DEBUG @ session.py:response_cb:149] 76820 - response is available for greenlet <greenlet.greenlet object at 0x1022bbaf8>, switching back
2017-10-26 16:09:17,289 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 13, 'nvim_set_var', ('deoplete#_initialized', True)]
2017-10-26 16:09:17,290 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\r\xacnvim_set_var\x92\xb5deoplete#_initialized\xc3''
2017-10-26 16:09:17,290 [DEBUG @ session.py:_yielding_request:153] 76820 - yielding from greenlet <greenlet.greenlet object at 0x1022bbaf8> to wait for response
2017-10-26 16:09:17,290 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,290 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,290 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,290 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [1, 13, None, None]
2017-10-26 16:09:17,291 [DEBUG @ async_session.py:_on_response:95] 76820 - received response: None, None
2017-10-26 16:09:17,291 [DEBUG @ session.py:response_cb:149] 76820 - response is available for greenlet <greenlet.greenlet object at 0x1022bbaf8>, switching back
2017-10-26 16:09:17,291 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 14, 'nvim_set_var', ('deoplete#_channel_id', 2)]
2017-10-26 16:09:17,291 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\x0e\xacnvim_set_var\x92\xb4deoplete#_channel_id\x02''
2017-10-26 16:09:17,291 [DEBUG @ session.py:_yielding_request:153] 76820 - yielding from greenlet <greenlet.greenlet object at 0x1022bbaf8> to wait for response
2017-10-26 16:09:17,291 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,291 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:17,292 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,292 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [1, 14, None, None]
2017-10-26 16:09:17,292 [DEBUG @ async_session.py:_on_response:95] 76820 - received response: None, None
2017-10-26 16:09:17,292 [DEBUG @ session.py:response_cb:149] 76820 - response is available for greenlet <greenlet.greenlet object at 0x1022bbaf8>, switching back
2017-10-26 16:09:17,292 [DEBUG @ session.py:handler:208] 76820 - greenlet <greenlet.greenlet object at 0x1022bbaf8> finished executing
2017-10-26 16:09:17,292 [DEBUG @ session.py:handler:213] 76820 - greenlet <greenlet.greenlet object at 0x1022bbaf8> is now dying...
2017-10-26 16:09:17,292 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:17,292 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:25,231 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:25,231 [DEBUG @ msgpack_stream.py:_on_data:56] 76820 - received message: [2, b'deoplete_on_event', [{b'custom': {b'source': {b'buffer': {b'mark': b'\xe2\x84\xac'}, b'omni': {b'mark': b'\xe2\x8c\xbe'}, b'jedi': {b'mark': b'\xee\x98\x86'}, b'_': {b'matchers': [b'matcher_full_fuzzy']}, b'ternjs': {b'mark': b'\xee\x98\x8c'}, b'neosnippet': {b'mark': b'\xef\x91\x88'}, b'file': {b'mark': b'file'}, b'typescript': {b'rank': 630, b'mark': b'\xee\x98\xa8'}}}, b'delay': 50, b'encoding': b'utf-8', b'position': [0, 93, 1, 0], b'bufvars': {}, b'rpc': b'deoplete_on_event', b'sources': [], b'max_kind_width': 22, b'camelcase': 1, b'ignorecase': 1, b'bufname': b'bashrc', b'changedtick': -1, b'smartcase': 1, b'keyword_patterns': b'[a-zA-Z_][a-zA-Z@0-9_\xc3\x80-\xc3\xbf]*', b'same_filetypes': [], b'complete_str': b'', b'dict__dictionary': b'', b'bufsize': 11713, b'input': b'', b'next_input': b"alias runvice='termsaver rssfeed --url=https://www.vice.com/en_us/rss'", b'filetypes': [b'sh'], b'omni__omnifunc': b'', b'filetype': b'sh', b'bufnr': 1, b'runtimepath': b'/Users/AMC/.config/nvim,/etc/xdg/nvim,/Users/AMC/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/Users/AMC/.config/nvim/repos/github.com/ternjs/tern_for_vim,/Users/AMC/Documents/EditorThemes/fraw/themer-vim,/Users/AMC/.config/nvim/repos/github.com/zchee/deoplete-go,/Users/AMC/.config/nvim/repos/github.com/Shougo/dein.vim,/Users/AMC/.config/nvim/repos/github.com/neomake/neomake,/Users/AMC/.config/nvim/.cache/init.vim/.dein,/usr/local/Cellar/neovim/HEAD-f0c2f82_1/share/nvim/runtime,/Users/AMC/.config/nvim/repos/github.com/ternjs/tern_for_vim/after,/Users/AMC/.config/nvim/.cache/init.vim/.dein/after,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/AMC/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/AMC/.config/nvim/after,/Users/AMC/.config/nvim/repos/github.com/Shougo/dein.vim/', b'bufpath': b'/Users/AMC/.dotfiles/bashrc', b'max_abbr_width': 22, b'max_menu_width': 22, b'cwd': b'/Users/AMC/.dotfiles', b'vars': {b'deoplete#sources#ternjs#depths': 1, b'deoplete#sources#ternjs#case_insensitive': 1, b'deoplete#sources#go#cgo': 0, b'deoplete#sources#go#json_directory': b'', b'deoplete#sources#ternjs#sort': 0, b'deoplete#sources#go#align_class': 0, b'deoplete#_keyword_patterns': {b'_': b'[a-zA-Z_]\\k*'}, b'deoplete#_rank': {}, b'deoplete#_omni_patterns': {b'html': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xhtml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*']}, b'deoplete#omni#functions': {}, b'deoplete#auto_complete_delay': 50, b'deoplete#_channel_id': 2, b'deoplete#complete_method': b'complete', b'deoplete#sources#go#pointer': 0, b'deoplete#keyword_patterns': {}, b'deoplete#delimiters': [b'/'], b'deoplete#member#prefix_patterns': {}, b'deoplete#omni_patterns': {b'html': b''}, b'deoplete#enable_at_startup': 1, b'deoplete#sources#go#on_event': 0, b'deoplete#sources#go#sort_class': [], b'deoplete#max_list': 100, b'deoplete#sources#go#package_dot': 0, b'deoplete#enable_refresh_always': 1, b'deoplete#file#enable_buffer_path': 1, b'deoplete#enable_profile': 0, b'deoplete#sources#ternjs#filetypes': [b'jsx', b'javascript.jsx', b'vue', b'...'], b'deoplete#sources#ternjs#tern_bin': b'/usr/local/bin/tern', b'deoplete#max_menu_width': 0, b'deoplete#sources#ternjs#types': 1, b'deoplete#auto_refresh_delay': 500, b'deoplete#enable_ignore_case': 1, b'deoplete#sources': {}, b'deoplete#omni#input_patterns': {}, b'deoplete#max_abbr_width': 0, b'deoplete#enable_camel_case': 1, b'deoplete#enable_smart_case': 1, b'deoplete#_context': {}, b'deoplete#auto_complete_start_length': 2, b'deoplete#sources#go#use_cache': 0, b'deoplete#sources#go#gocode_binary': b'', b'deoplete#skip_chars': [], b'deoplete#disable_auto_complete': 0, b'deoplete#_initialized': True, b'deoplete#ignore_sources': {b'_': [b'around']}, b'deoplete#_logging': {}}, b'event': b'VimLeavePre'}]]
2017-10-26 16:09:25,232 [DEBUG @ async_session.py:_on_notification:102] 76820 - received notification: b'deoplete_on_event', [{b'custom': {b'source': {b'buffer': {b'mark': b'\xe2\x84\xac'}, b'omni': {b'mark': b'\xe2\x8c\xbe'}, b'jedi': {b'mark': b'\xee\x98\x86'}, b'_': {b'matchers': [b'matcher_full_fuzzy']}, b'ternjs': {b'mark': b'\xee\x98\x8c'}, b'neosnippet': {b'mark': b'\xef\x91\x88'}, b'file': {b'mark': b'file'}, b'typescript': {b'rank': 630, b'mark': b'\xee\x98\xa8'}}}, b'delay': 50, b'encoding': b'utf-8', b'position': [0, 93, 1, 0], b'bufvars': {}, b'rpc': b'deoplete_on_event', b'sources': [], b'max_kind_width': 22, b'camelcase': 1, b'ignorecase': 1, b'bufname': b'bashrc', b'changedtick': -1, b'smartcase': 1, b'keyword_patterns': b'[a-zA-Z_][a-zA-Z@0-9_\xc3\x80-\xc3\xbf]*', b'same_filetypes': [], b'complete_str': b'', b'dict__dictionary': b'', b'bufsize': 11713, b'input': b'', b'next_input': b"alias runvice='termsaver rssfeed --url=https://www.vice.com/en_us/rss'", b'filetypes': [b'sh'], b'omni__omnifunc': b'', b'filetype': b'sh', b'bufnr': 1, b'runtimepath': b'/Users/AMC/.config/nvim,/etc/xdg/nvim,/Users/AMC/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/Users/AMC/.config/nvim/repos/github.com/ternjs/tern_for_vim,/Users/AMC/Documents/EditorThemes/fraw/themer-vim,/Users/AMC/.config/nvim/repos/github.com/zchee/deoplete-go,/Users/AMC/.config/nvim/repos/github.com/Shougo/dein.vim,/Users/AMC/.config/nvim/repos/github.com/neomake/neomake,/Users/AMC/.config/nvim/.cache/init.vim/.dein,/usr/local/Cellar/neovim/HEAD-f0c2f82_1/share/nvim/runtime,/Users/AMC/.config/nvim/repos/github.com/ternjs/tern_for_vim/after,/Users/AMC/.config/nvim/.cache/init.vim/.dein/after,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/AMC/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/AMC/.config/nvim/after,/Users/AMC/.config/nvim/repos/github.com/Shougo/dein.vim/', b'bufpath': b'/Users/AMC/.dotfiles/bashrc', b'max_abbr_width': 22, b'max_menu_width': 22, b'cwd': b'/Users/AMC/.dotfiles', b'vars': {b'deoplete#sources#ternjs#depths': 1, b'deoplete#sources#ternjs#case_insensitive': 1, b'deoplete#sources#go#cgo': 0, b'deoplete#sources#go#json_directory': b'', b'deoplete#sources#ternjs#sort': 0, b'deoplete#sources#go#align_class': 0, b'deoplete#_keyword_patterns': {b'_': b'[a-zA-Z_]\\k*'}, b'deoplete#_rank': {}, b'deoplete#_omni_patterns': {b'html': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xhtml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*']}, b'deoplete#omni#functions': {}, b'deoplete#auto_complete_delay': 50, b'deoplete#_channel_id': 2, b'deoplete#complete_method': b'complete', b'deoplete#sources#go#pointer': 0, b'deoplete#keyword_patterns': {}, b'deoplete#delimiters': [b'/'], b'deoplete#member#prefix_patterns': {}, b'deoplete#omni_patterns': {b'html': b''}, b'deoplete#enable_at_startup': 1, b'deoplete#sources#go#on_event': 0, b'deoplete#sources#go#sort_class': [], b'deoplete#max_list': 100, b'deoplete#sources#go#package_dot': 0, b'deoplete#enable_refresh_always': 1, b'deoplete#file#enable_buffer_path': 1, b'deoplete#enable_profile': 0, b'deoplete#sources#ternjs#filetypes': [b'jsx', b'javascript.jsx', b'vue', b'...'], b'deoplete#sources#ternjs#tern_bin': b'/usr/local/bin/tern', b'deoplete#max_menu_width': 0, b'deoplete#sources#ternjs#types': 1, b'deoplete#auto_refresh_delay': 500, b'deoplete#enable_ignore_case': 1, b'deoplete#sources': {}, b'deoplete#omni#input_patterns': {}, b'deoplete#max_abbr_width': 0, b'deoplete#enable_camel_case': 1, b'deoplete#enable_smart_case': 1, b'deoplete#_context': {}, b'deoplete#auto_complete_start_length': 2, b'deoplete#sources#go#use_cache': 0, b'deoplete#sources#go#gocode_binary': b'', b'deoplete#skip_chars': [], b'deoplete#disable_auto_complete': 0, b'deoplete#_initialized': True, b'deoplete#ignore_sources': {b'_': [b'around']}, b'deoplete#_logging': {}}, b'event': b'VimLeavePre'}]
2017-10-26 16:09:25,232 [DEBUG @ session.py:_on_notification:216] 76820 - received rpc notification, greenlet <greenlet.greenlet object at 0x1022bbaf8> will handle it
2017-10-26 16:09:25,233 [DEBUG @ host.py:_on_notification:107] 76820 - calling notification handler for "deoplete_on_event", args: "[{b'custom': {b'source': {b'buffer': {b'mark': b'\xe2\x84\xac'}, b'ternjs': {b'mark': b'\xee\x98\x8c'}, b'jedi': {b'mark': b'\xee\x98\x86'}, b'_': {b'matchers': [b'matcher_full_fuzzy']}, b'omni': {b'mark': b'\xe2\x8c\xbe'}, b'neosnippet': {b'mark': b'\xef\x91\x88'}, b'file': {b'mark': b'file'}, b'typescript': {b'rank': 630, b'mark': b'\xee\x98\xa8'}}}, b'event': b'VimLeavePre', b'delay': 50, b'encoding': b'utf-8', b'bufname': b'bashrc', b'bufvars': {}, b'rpc': b'deoplete_on_event', b'sources': [], b'max_kind_width': 22, b'camelcase': 1, b'ignorecase': 1, b'runtimepath': b'/Users/AMC/.config/nvim,/etc/xdg/nvim,/Users/AMC/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/Users/AMC/.config/nvim/repos/github.com/ternjs/tern_for_vim,/Users/AMC/Documents/EditorThemes/fraw/themer-vim,/Users/AMC/.config/nvim/repos/github.com/zchee/deoplete-go,/Users/AMC/.config/nvim/repos/github.com/Shougo/dein.vim,/Users/AMC/.config/nvim/repos/github.com/neomake/neomake,/Users/AMC/.config/nvim/.cache/init.vim/.dein,/usr/local/Cellar/neovim/HEAD-f0c2f82_1/share/nvim/runtime,/Users/AMC/.config/nvim/repos/github.com/ternjs/tern_for_vim/after,/Users/AMC/.config/nvim/.cache/init.vim/.dein/after,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/AMC/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/AMC/.config/nvim/after,/Users/AMC/.config/nvim/repos/github.com/Shougo/dein.vim/', b'next_input': b"alias runvice='termsaver rssfeed --url=https://www.vice.com/en_us/rss'", b'changedtick': -1, b'smartcase': 1, b'keyword_patterns': b'[a-zA-Z_][a-zA-Z@0-9_\xc3\x80-\xc3\xbf]*', b'same_filetypes': [], b'bufsize': 11713, b'input': b'', b'omni__omnifunc': b'', b'filetype': b'sh', b'bufnr': 1, b'filetypes': [b'sh'], b'max_abbr_width': 22, b'bufpath': b'/Users/AMC/.dotfiles/bashrc', b'complete_str': b'', b'max_menu_width': 22, b'cwd': b'/Users/AMC/.dotfiles', b'dict__dictionary': b'', b'vars': {b'deoplete#sources#ternjs#depths': 1, b'deoplete#sources#ternjs#case_insensitive': 1, b'deoplete#sources#go#pointer': 0, b'deoplete#sources#go#json_directory': b'', b'deoplete#sources#ternjs#sort': 0, b'deoplete#sources#go#align_class': 0, b'deoplete#_keyword_patterns': {b'_': b'[a-zA-Z_]\\k*'}, b'deoplete#_rank': {}, b'deoplete#_omni_patterns': {b'html': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xhtml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*']}, b'deoplete#auto_complete_delay': 50, b'deoplete#_channel_id': 2, b'deoplete#complete_method': b'complete', b'deoplete#sources#go#cgo': 0, b'deoplete#keyword_patterns': {}, b'deoplete#omni#functions': {}, b'deoplete#member#prefix_patterns': {}, b'deoplete#delimiters': [b'/'], b'deoplete#ignore_sources': {b'_': [b'around']}, b'deoplete#sources#go#on_event': 0, b'deoplete#sources#go#sort_class': [], b'deoplete#max_list': 100, b'deoplete#sources#go#package_dot': 0, b'deoplete#enable_refresh_always': 1, b'deoplete#file#enable_buffer_path': 1, b'deoplete#enable_profile': 0, b'deoplete#sources#ternjs#filetypes': [b'jsx', b'javascript.jsx', b'vue', b'...'], b'deoplete#sources#ternjs#tern_bin': b'/usr/local/bin/tern', b'deoplete#sources': {}, b'deoplete#max_menu_width': 0, b'deoplete#sources#ternjs#types': 1, b'deoplete#auto_refresh_delay': 500, b'deoplete#enable_ignore_case': 1, b'deoplete#enable_at_startup': 1, b'deoplete#omni#input_patterns': {}, b'deoplete#max_abbr_width': 0, b'deoplete#enable_camel_case': 1, b'deoplete#enable_smart_case': 1, b'deoplete#_context': {}, b'deoplete#auto_complete_start_length': 2, b'deoplete#sources#go#use_cache': 0, b'deoplete#sources#go#gocode_binary': b'', b'deoplete#skip_chars': [], b'deoplete#disable_auto_complete': 0, b'deoplete#_initialized': True, b'deoplete#omni_patterns': {b'html': b''}, b'deoplete#_logging': {}}, b'position': [0, 93, 1, 0]}]"
2017-10-26 16:09:25,235 [DEBUG @ msgpack_stream.py:send:33] 76820 - sent [0, 15, 'nvim_eval', ('values(neosnippet#helpers#get_completion_snippets())',)]
2017-10-26 16:09:25,235 [DEBUG @ base.py:send:113] 76820 - Sending 'b'\x94\x00\x0f\xa9nvim_eval\x91\xda\x004values(neosnippet#helpers#get_completion_snippets())''
2017-10-26 16:09:25,235 [DEBUG @ session.py:_yielding_request:153] 76820 - yielding from greenlet <greenlet.greenlet object at 0x1022bbaf8> to wait for response
2017-10-26 16:09:25,236 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:25,236 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:25,331 [DEBUG @ msgpack_stream.py:_on_data:54] 76820 - waiting for message...
2017-10-26 16:09:25,331 [DEBUG @ msgpack_stream.py:_on_data:59] 76820 - unpacker needs more data...
2017-10-26 16:09:25,332 [DEBUG @ base.py:_on_error:166] 76820 - EOF
2017-10-26 16:09:25,332 [DEBUG @ base.py:stop:149] 76820 - Stopped event loop
2017-10-26 16:09:25,332 [DEBUG @ base.py:run:140] 76820 - Exited event loop
